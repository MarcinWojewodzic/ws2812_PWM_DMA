
ws2812_PWM_DMA_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005618  08005618  00015618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005808  08005808  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005810  08005810  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000000c  08005824  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08005824  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202b  00000000  00000000  0002cbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001658e  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3b7  00000000  00000000  0004666e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b67b  00000000  00000000  00053a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  000df0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080055fc 	.word	0x080055fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080055fc 	.word	0x080055fc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96e 	b.w	8000dc8 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	468c      	mov	ip, r1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8083 	bne.w	8000c1a <__udivmoddi4+0x116>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4617      	mov	r7, r2
 8000b18:	d947      	bls.n	8000baa <__udivmoddi4+0xa6>
 8000b1a:	fab2 f282 	clz	r2, r2
 8000b1e:	b142      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	f1c2 0020 	rsb	r0, r2, #32
 8000b24:	fa24 f000 	lsr.w	r0, r4, r0
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	4097      	lsls	r7, r2
 8000b2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b30:	4094      	lsls	r4, r2
 8000b32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fbbc f6f8 	udiv	r6, ip, r8
 8000b3c:	fa1f fe87 	uxth.w	lr, r7
 8000b40:	fb08 c116 	mls	r1, r8, r6, ip
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb06 f10e 	mul.w	r1, r6, lr
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x60>
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b56:	f080 8119 	bcs.w	8000d8c <__udivmoddi4+0x288>
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	f240 8116 	bls.w	8000d8c <__udivmoddi4+0x288>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	443b      	add	r3, r7
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x8c>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b82:	f080 8105 	bcs.w	8000d90 <__udivmoddi4+0x28c>
 8000b86:	45a6      	cmp	lr, r4
 8000b88:	f240 8102 	bls.w	8000d90 <__udivmoddi4+0x28c>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	443c      	add	r4, r7
 8000b90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b94:	eba4 040e 	sub.w	r4, r4, lr
 8000b98:	2600      	movs	r6, #0
 8000b9a:	b11d      	cbz	r5, 8000ba4 <__udivmoddi4+0xa0>
 8000b9c:	40d4      	lsrs	r4, r2
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba4:	4631      	mov	r1, r6
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	b902      	cbnz	r2, 8000bae <__udivmoddi4+0xaa>
 8000bac:	deff      	udf	#255	; 0xff
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d150      	bne.n	8000c58 <__udivmoddi4+0x154>
 8000bb6:	1bcb      	subs	r3, r1, r7
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f f887 	uxth.w	r8, r7
 8000bc0:	2601      	movs	r6, #1
 8000bc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bc6:	0c21      	lsrs	r1, r4, #16
 8000bc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0xe4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0xe2>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	f200 80e9 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1ac9      	subs	r1, r1, r3
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bf4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x10c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x10a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80d9 	bhi.w	8000dc0 <__udivmoddi4+0x2bc>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e7bf      	b.n	8000b9a <__udivmoddi4+0x96>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x12e>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80b1 	beq.w	8000d86 <__udivmoddi4+0x282>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x1cc>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0x140>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80b8 	bhi.w	8000db4 <__udivmoddi4+0x2b0>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0103 	sbc.w	r1, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0a8      	beq.n	8000ba4 <__udivmoddi4+0xa0>
 8000c52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c56:	e7a5      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c60:	4097      	lsls	r7, r2
 8000c62:	fa01 f002 	lsl.w	r0, r1, r2
 8000c66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6a:	40d9      	lsrs	r1, r3
 8000c6c:	4330      	orrs	r0, r6
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f108 	mul.w	r1, r6, r8
 8000c84:	4299      	cmp	r1, r3
 8000c86:	fa04 f402 	lsl.w	r4, r4, r2
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x19c>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c92:	f080 808d 	bcs.w	8000db0 <__udivmoddi4+0x2ac>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 808a 	bls.w	8000db0 <__udivmoddi4+0x2ac>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	443b      	add	r3, r7
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b281      	uxth	r1, r0
 8000ca4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb00 f308 	mul.w	r3, r0, r8
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x1c4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cbe:	d273      	bcs.n	8000da8 <__udivmoddi4+0x2a4>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d971      	bls.n	8000da8 <__udivmoddi4+0x2a4>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4439      	add	r1, r7
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cce:	e778      	b.n	8000bc2 <__udivmoddi4+0xbe>
 8000cd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cdc:	431c      	orrs	r4, r3
 8000cde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	0c3b      	lsrs	r3, r7, #16
 8000cf2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf6:	fa1f f884 	uxth.w	r8, r4
 8000cfa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d02:	fb09 fa08 	mul.w	sl, r9, r8
 8000d06:	458a      	cmp	sl, r1
 8000d08:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x220>
 8000d12:	1861      	adds	r1, r4, r1
 8000d14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d18:	d248      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d1a:	458a      	cmp	sl, r1
 8000d1c:	d946      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4421      	add	r1, r4
 8000d24:	eba1 010a 	sub.w	r1, r1, sl
 8000d28:	b2bf      	uxth	r7, r7
 8000d2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d36:	fb00 f808 	mul.w	r8, r0, r8
 8000d3a:	45b8      	cmp	r8, r7
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x24a>
 8000d3e:	19e7      	adds	r7, r4, r7
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d22e      	bcs.n	8000da4 <__udivmoddi4+0x2a0>
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d92c      	bls.n	8000da4 <__udivmoddi4+0x2a0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4427      	add	r7, r4
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	eba7 0708 	sub.w	r7, r7, r8
 8000d56:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5a:	454f      	cmp	r7, r9
 8000d5c:	46c6      	mov	lr, r8
 8000d5e:	4649      	mov	r1, r9
 8000d60:	d31a      	bcc.n	8000d98 <__udivmoddi4+0x294>
 8000d62:	d017      	beq.n	8000d94 <__udivmoddi4+0x290>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x27a>
 8000d66:	ebb3 020e 	subs.w	r2, r3, lr
 8000d6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d72:	40f2      	lsrs	r2, r6
 8000d74:	ea4c 0202 	orr.w	r2, ip, r2
 8000d78:	40f7      	lsrs	r7, r6
 8000d7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d7e:	2600      	movs	r6, #0
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e70b      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0x60>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6fd      	b.n	8000b90 <__udivmoddi4+0x8c>
 8000d94:	4543      	cmp	r3, r8
 8000d96:	d2e5      	bcs.n	8000d64 <__udivmoddi4+0x260>
 8000d98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7df      	b.n	8000d64 <__udivmoddi4+0x260>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e7d2      	b.n	8000d4e <__udivmoddi4+0x24a>
 8000da8:	4660      	mov	r0, ip
 8000daa:	e78d      	b.n	8000cc8 <__udivmoddi4+0x1c4>
 8000dac:	4681      	mov	r9, r0
 8000dae:	e7b9      	b.n	8000d24 <__udivmoddi4+0x220>
 8000db0:	4666      	mov	r6, ip
 8000db2:	e775      	b.n	8000ca0 <__udivmoddi4+0x19c>
 8000db4:	4630      	mov	r0, r6
 8000db6:	e74a      	b.n	8000c4e <__udivmoddi4+0x14a>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	4439      	add	r1, r7
 8000dbe:	e713      	b.n	8000be8 <__udivmoddi4+0xe4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	e724      	b.n	8000c10 <__udivmoddi4+0x10c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200d      	movs	r0, #13
 8000df4:	f001 f813 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000df8:	200d      	movs	r0, #13
 8000dfa:	f001 f82c 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x4c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	00000000 	.word	0x00000000

08000e60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e66:	f000 fe69 	bl	8001b3c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e6a:	f000 f86f 	bl	8000f4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e6e:	f7ff ffcd 	bl	8000e0c <MX_GPIO_Init>
	MX_DMA_Init();
 8000e72:	f7ff ffab 	bl	8000dcc <MX_DMA_Init>
	MX_TIM5_Init();
 8000e76:	f000 f94f 	bl	8001118 <MX_TIM5_Init>

	/* USER CODE BEGIN 2 */
	ws2812_init(&htim5);
 8000e7a:	482f      	ldr	r0, [pc, #188]	; (8000f38 <main+0xd8>)
 8000e7c:	f000 fa58 	bl	8001330 <ws2812_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
			for(int i=0;i<360;i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	e04c      	b.n	8000f20 <main+0xc0>
			{
				ws2812_stroboskopHSV(i, i, 255, 255);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	23ff      	movs	r3, #255	; 0xff
 8000e90:	22ff      	movs	r2, #255	; 0xff
 8000e92:	f000 fde7 	bl	8001a64 <ws2812_stroboskopHSV>
				ws2812_display();
 8000e96:	f000 fa8b 	bl	80013b0 <ws2812_display>
				int p=250*(1+sin((i*3.14159*4)/180.0));
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff faee 	bl	800047c <__aeabi_i2d>
 8000ea0:	a323      	add	r3, pc, #140	; (adr r3, 8000f30 <main+0xd0>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fb53 	bl	8000550 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <main+0xdc>)
 8000eb8:	f7ff fb4a 	bl	8000550 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <main+0xe0>)
 8000eca:	f7ff fc6b 	bl	80007a4 <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	ec43 2b17 	vmov	d7, r2, r3
 8000ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8000eda:	eef0 0a67 	vmov.f32	s1, s15
 8000ede:	f003 fb57 	bl	8004590 <sin>
 8000ee2:	ec51 0b10 	vmov	r0, r1, d0
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <main+0xe4>)
 8000eec:	f7ff f97a 	bl	80001e4 <__adddf3>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <main+0xe8>)
 8000efe:	f7ff fb27 	bl	8000550 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fdbb 	bl	8000a84 <__aeabi_d2iz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	603b      	str	r3, [r7, #0]
				HAL_Delay(p);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fe83 	bl	8001c20 <HAL_Delay>
			for(int i=0;i<360;i++)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000f26:	dbae      	blt.n	8000e86 <main+0x26>
 8000f28:	e7aa      	b.n	8000e80 <main+0x20>
 8000f2a:	bf00      	nop
 8000f2c:	f3af 8000 	nop.w
 8000f30:	f01b866e 	.word	0xf01b866e
 8000f34:	400921f9 	.word	0x400921f9
 8000f38:	2000002c 	.word	0x2000002c
 8000f3c:	40100000 	.word	0x40100000
 8000f40:	40668000 	.word	0x40668000
 8000f44:	3ff00000 	.word	0x3ff00000
 8000f48:	406f4000 	.word	0x406f4000

08000f4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fb10 	bl	8004580 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <SystemClock_Config+0xc8>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <SystemClock_Config+0xc8>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemClock_Config+0xc8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <SystemClock_Config+0xcc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemClock_Config+0xcc>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemClock_Config+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fc71 	bl	80028b8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000fdc:	f000 f81e 	bl	800101c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fed3 	bl	8002da8 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001008:	f000 f808 	bl	800101c <Error_Handler>
	}
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 fd8c 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DMA1_Stream2_IRQHandler+0x10>)
 80010d2:	f001 f803 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000074 	.word	0x20000074

080010e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM5_IRQHandler+0x10>)
 80010e6:	f002 fb45 	bl	8003774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000002c 	.word	0x2000002c

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim5_ch1;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_TIM5_Init+0xe4>)
 800114a:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <MX_TIM5_Init+0xe8>)
 800114c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_TIM5_Init+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_TIM5_Init+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 124;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_TIM5_Init+0xe4>)
 800115c:	227c      	movs	r2, #124	; 0x7c
 800115e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_TIM5_Init+0xe4>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_TIM5_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800116c:	4823      	ldr	r0, [pc, #140]	; (80011fc <MX_TIM5_Init+0xe4>)
 800116e:	f001 ffe3 	bl	8003138 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001178:	f7ff ff50 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001186:	4619      	mov	r1, r3
 8001188:	481c      	ldr	r0, [pc, #112]	; (80011fc <MX_TIM5_Init+0xe4>)
 800118a:	f002 fcbd 	bl	8003b08 <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001194:	f7ff ff42 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <MX_TIM5_Init+0xe4>)
 800119a:	f002 f81c 	bl	80031d6 <HAL_TIM_PWM_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80011a4:	f7ff ff3a 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4619      	mov	r1, r3
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_TIM5_Init+0xe4>)
 80011b8:	f003 f93c 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80011c2:	f7ff ff2b 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c6:	2360      	movs	r3, #96	; 0x60
 80011c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM5_Init+0xe4>)
 80011de:	f002 fbd1 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80011e8:	f7ff ff18 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM5_Init+0xe4>)
 80011ee:	f000 f865 	bl	80012bc <HAL_TIM_MspPostInit>

}
 80011f2:	bf00      	nop
 80011f4:	3738      	adds	r7, #56	; 0x38
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	40000c00 	.word	0x40000c00

08001204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_TIM_Base_MspInit+0xa8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d146      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_TIM_Base_MspInit+0xac>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_TIM_Base_MspInit+0xac>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_TIM_Base_MspInit+0xac>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800123a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800123e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800125e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001262:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001278:	480e      	ldr	r0, [pc, #56]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800127a:	f000 fe07 	bl	8001e8c <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001284:	f7ff feca 	bl	800101c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f000 fdc0 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800129e:	2032      	movs	r0, #50	; 0x32
 80012a0:	f000 fdd9 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40000c00 	.word	0x40000c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	20000074 	.word	0x20000074
 80012b8:	40026040 	.word	0x40026040

080012bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11d      	bne.n	800131a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_TIM_MspPostInit+0x70>)
 8001316:	f001 f94b 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40000c00 	.word	0x40000c00
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <ws2812_init>:
uint32_t buffer[48];
uint8_t reset_flag;
uint16_t led=0;
TIM_HandleTypeDef* ws2812_tim;
void ws2812_init(TIM_HandleTypeDef* tim)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	ws2812_tim=tim;
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <ws2812_init+0x1c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000594 	.word	0x20000594

08001350 <ws2812_set_pixel>:
void ws2812_set_pixel(uint16_t id, uint8_t red, uint8_t green, uint8_t blue)
{
 8001350:	b490      	push	{r4, r7}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	717b      	strb	r3, [r7, #5]
 8001366:	460b      	mov	r3, r1
 8001368:	713b      	strb	r3, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	70fb      	strb	r3, [r7, #3]
	ws2812_array[id].b=blue;
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	490e      	ldr	r1, [pc, #56]	; (80013ac <ws2812_set_pixel+0x5c>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	440b      	add	r3, r1
 800137a:	3302      	adds	r3, #2
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	701a      	strb	r2, [r3, #0]
	ws2812_array[id].r=red;
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	490a      	ldr	r1, [pc, #40]	; (80013ac <ws2812_set_pixel+0x5c>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	440b      	add	r3, r1
 800138c:	797a      	ldrb	r2, [r7, #5]
 800138e:	701a      	strb	r2, [r3, #0]
	ws2812_array[id].g=green;
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <ws2812_set_pixel+0x5c>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	440b      	add	r3, r1
 800139c:	3301      	adds	r3, #1
 800139e:	793a      	ldrb	r2, [r7, #4]
 80013a0:	701a      	strb	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000598 	.word	0x20000598

080013b0 <ws2812_display>:
{
	return _gammaTable[x];
}
uint32_t led_data[256];
void ws2812_display(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	reset_flag=0;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <ws2812_display+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	led=0;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <ws2812_display+0x5c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<48;i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	e007      	b.n	80013d8 <ws2812_display+0x28>
	{
		buffer[i]=0x00;
 80013c8:	4a11      	ldr	r2, [pc, #68]	; (8001410 <ws2812_display+0x60>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2100      	movs	r1, #0
 80013ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<48;i++)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b2f      	cmp	r3, #47	; 0x2f
 80013dc:	ddf4      	ble.n	80013c8 <ws2812_display+0x18>
	}
	HAL_TIM_PWM_Start_DMA(ws2812_tim, TIM_CHANNEL_1, buffer, 48);
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <ws2812_display+0x64>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	2330      	movs	r3, #48	; 0x30
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <ws2812_display+0x60>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	f001 ff4e 	bl	8003288 <HAL_TIM_PWM_Start_DMA>
	while(HAL_DMA_STATE_READY != ws2812_tim->hdma[1]->State){}
 80013ec:	bf00      	nop
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <ws2812_display+0x64>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d1f7      	bne.n	80013ee <ws2812_display+0x3e>
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200005bc 	.word	0x200005bc
 800140c:	20000028 	.word	0x20000028
 8001410:	200004d4 	.word	0x200004d4
 8001414:	20000594 	.word	0x20000594

08001418 <ws2812_clear>:
void ws2812_clear()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	for(int i=0;i<WS2812_LEDS;i++)
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	e009      	b.n	8001438 <ws2812_clear+0x20>
	{
		ws2812_set_pixel(i, 0, 0, 0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b298      	uxth	r0, r3
 8001428:	2300      	movs	r3, #0
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff ff8f 	bl	8001350 <ws2812_set_pixel>
	for(int i=0;i<WS2812_LEDS;i++)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b0b      	cmp	r3, #11
 800143c:	ddf2      	ble.n	8001424 <ws2812_clear+0xc>
	}
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <WS2812B_SetDiodeHSV>:
void WS2812B_SetDiodeHSV(int16_t diode_id, uint16_t Hue, uint8_t Saturation, uint8_t Brightness)
{
 8001448:	b490      	push	{r4, r7}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4604      	mov	r4, r0
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4623      	mov	r3, r4
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	4603      	mov	r3, r0
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	70fb      	strb	r3, [r7, #3]
 8001462:	4613      	mov	r3, r2
 8001464:	70bb      	strb	r3, [r7, #2]
	if(diode_id >= WS2812_LEDS || diode_id < 0) return;
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	2b0b      	cmp	r3, #11
 800146c:	f300 8150 	bgt.w	8001710 <WS2812B_SetDiodeHSV+0x2c8>
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f2c0 814b 	blt.w	8001710 <WS2812B_SetDiodeHSV+0x2c8>
	uint16_t Sector, Fracts, p, q, t;

	if(Saturation == 0)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11d      	bne.n	80014bc <WS2812B_SetDiodeHSV+0x74>
	{
		ws2812_array[diode_id].r = Brightness;
 8001480:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001484:	49a5      	ldr	r1, [pc, #660]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	440b      	add	r3, r1
 800148e:	78ba      	ldrb	r2, [r7, #2]
 8001490:	701a      	strb	r2, [r3, #0]
		ws2812_array[diode_id].g = Brightness;
 8001492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001496:	49a1      	ldr	r1, [pc, #644]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	440b      	add	r3, r1
 80014a0:	3301      	adds	r3, #1
 80014a2:	78ba      	ldrb	r2, [r7, #2]
 80014a4:	701a      	strb	r2, [r3, #0]
		ws2812_array[diode_id].b = Brightness;
 80014a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014aa:	499c      	ldr	r1, [pc, #624]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	3302      	adds	r3, #2
 80014b6:	78ba      	ldrb	r2, [r7, #2]
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e12a      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
	}
	else
	{
		if(Hue >= 360) Hue = 359;
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80014c2:	d302      	bcc.n	80014ca <WS2812B_SetDiodeHSV+0x82>
 80014c4:	f240 1367 	movw	r3, #359	; 0x167
 80014c8:	80bb      	strh	r3, [r7, #4]

		Sector = Hue / 60; // Sector 0 to 5
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	4a94      	ldr	r2, [pc, #592]	; (8001720 <WS2812B_SetDiodeHSV+0x2d8>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	82fb      	strh	r3, [r7, #22]
		Fracts = Hue % 60;
 80014d6:	88ba      	ldrh	r2, [r7, #4]
 80014d8:	4b91      	ldr	r3, [pc, #580]	; (8001720 <WS2812B_SetDiodeHSV+0x2d8>)
 80014da:	fba3 1302 	umull	r1, r3, r3, r2
 80014de:	0959      	lsrs	r1, r3, #5
 80014e0:	460b      	mov	r3, r1
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a5b      	subs	r3, r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	82bb      	strh	r3, [r7, #20]
		p = (Brightness * (255 - Saturation)) / 256;
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <WS2812B_SetDiodeHSV+0xb6>
 80014fc:	33ff      	adds	r3, #255	; 0xff
 80014fe:	121b      	asrs	r3, r3, #8
 8001500:	827b      	strh	r3, [r7, #18]
		q = (Brightness * (255 - (Saturation * Fracts)/60)) / 256;
 8001502:	78ba      	ldrb	r2, [r7, #2]
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	8ab9      	ldrh	r1, [r7, #20]
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4984      	ldr	r1, [pc, #528]	; (8001720 <WS2812B_SetDiodeHSV+0x2d8>)
 800150e:	fb81 0103 	smull	r0, r1, r1, r3
 8001512:	4419      	add	r1, r3
 8001514:	1149      	asrs	r1, r1, #5
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1a5b      	subs	r3, r3, r1
 800151a:	33ff      	adds	r3, #255	; 0xff
 800151c:	fb03 f302 	mul.w	r3, r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	da00      	bge.n	8001526 <WS2812B_SetDiodeHSV+0xde>
 8001524:	33ff      	adds	r3, #255	; 0xff
 8001526:	121b      	asrs	r3, r3, #8
 8001528:	823b      	strh	r3, [r7, #16]
		t = (Brightness * (255 - (Saturation * (59 - Fracts))/60)) / 256;
 800152a:	78ba      	ldrb	r2, [r7, #2]
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	8ab9      	ldrh	r1, [r7, #20]
 8001530:	f1c1 013b 	rsb	r1, r1, #59	; 0x3b
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4979      	ldr	r1, [pc, #484]	; (8001720 <WS2812B_SetDiodeHSV+0x2d8>)
 800153a:	fb81 0103 	smull	r0, r1, r1, r3
 800153e:	4419      	add	r1, r3
 8001540:	1149      	asrs	r1, r1, #5
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1a5b      	subs	r3, r3, r1
 8001546:	33ff      	adds	r3, #255	; 0xff
 8001548:	fb03 f302 	mul.w	r3, r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <WS2812B_SetDiodeHSV+0x10a>
 8001550:	33ff      	adds	r3, #255	; 0xff
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	81fb      	strh	r3, [r7, #14]


		switch(Sector)
 8001556:	8afb      	ldrh	r3, [r7, #22]
 8001558:	2b04      	cmp	r3, #4
 800155a:	f200 80b7 	bhi.w	80016cc <WS2812B_SetDiodeHSV+0x284>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <WS2812B_SetDiodeHSV+0x11c>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001579 	.word	0x08001579
 8001568:	080015bd 	.word	0x080015bd
 800156c:	08001601 	.word	0x08001601
 8001570:	08001645 	.word	0x08001645
 8001574:	08001689 	.word	0x08001689
		{
		case 0:
			ws2812_array[diode_id].r = Brightness;
 8001578:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800157c:	4967      	ldr	r1, [pc, #412]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	440b      	add	r3, r1
 8001586:	78ba      	ldrb	r2, [r7, #2]
 8001588:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = (uint8_t)t;
 800158a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	4962      	ldr	r1, [pc, #392]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	440b      	add	r3, r1
 800159c:	3301      	adds	r3, #1
 800159e:	4602      	mov	r2, r0
 80015a0:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = (uint8_t)p;
 80015a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a6:	8a7b      	ldrh	r3, [r7, #18]
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	495c      	ldr	r1, [pc, #368]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	3302      	adds	r3, #2
 80015b6:	4602      	mov	r2, r0
 80015b8:	701a      	strb	r2, [r3, #0]
			break;
 80015ba:	e0aa      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
		case 1:
			ws2812_array[diode_id].r = (uint8_t)q;
 80015bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c0:	8a3b      	ldrh	r3, [r7, #16]
 80015c2:	b2d8      	uxtb	r0, r3
 80015c4:	4955      	ldr	r1, [pc, #340]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	4602      	mov	r2, r0
 80015d0:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = Brightness;
 80015d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d6:	4951      	ldr	r1, [pc, #324]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	440b      	add	r3, r1
 80015e0:	3301      	adds	r3, #1
 80015e2:	78ba      	ldrb	r2, [r7, #2]
 80015e4:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = (uint8_t)p;
 80015e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ea:	8a7b      	ldrh	r3, [r7, #18]
 80015ec:	b2d8      	uxtb	r0, r3
 80015ee:	494b      	ldr	r1, [pc, #300]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	3302      	adds	r3, #2
 80015fa:	4602      	mov	r2, r0
 80015fc:	701a      	strb	r2, [r3, #0]
			break;
 80015fe:	e088      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
		case 2:
			ws2812_array[diode_id].r = (uint8_t)p;
 8001600:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001604:	8a7b      	ldrh	r3, [r7, #18]
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	4944      	ldr	r1, [pc, #272]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	440b      	add	r3, r1
 8001612:	4602      	mov	r2, r0
 8001614:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = Brightness;
 8001616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800161a:	4940      	ldr	r1, [pc, #256]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	440b      	add	r3, r1
 8001624:	3301      	adds	r3, #1
 8001626:	78ba      	ldrb	r2, [r7, #2]
 8001628:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = (uint8_t)t;
 800162a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	493a      	ldr	r1, [pc, #232]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	440b      	add	r3, r1
 800163c:	3302      	adds	r3, #2
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]
			break;
 8001642:	e066      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
		case 3:
			ws2812_array[diode_id].r = (uint8_t)p;
 8001644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001648:	8a7b      	ldrh	r3, [r7, #18]
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	4933      	ldr	r1, [pc, #204]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	440b      	add	r3, r1
 8001656:	4602      	mov	r2, r0
 8001658:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = (uint8_t)q;
 800165a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800165e:	8a3b      	ldrh	r3, [r7, #16]
 8001660:	b2d8      	uxtb	r0, r3
 8001662:	492e      	ldr	r1, [pc, #184]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	440b      	add	r3, r1
 800166c:	3301      	adds	r3, #1
 800166e:	4602      	mov	r2, r0
 8001670:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = Brightness;
 8001672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001676:	4929      	ldr	r1, [pc, #164]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	440b      	add	r3, r1
 8001680:	3302      	adds	r3, #2
 8001682:	78ba      	ldrb	r2, [r7, #2]
 8001684:	701a      	strb	r2, [r3, #0]
			break;
 8001686:	e044      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
		case 4:
			ws2812_array[diode_id].r = (uint8_t)t;
 8001688:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	b2d8      	uxtb	r0, r3
 8001690:	4922      	ldr	r1, [pc, #136]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	440b      	add	r3, r1
 800169a:	4602      	mov	r2, r0
 800169c:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = (uint8_t)p;
 800169e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	b2d8      	uxtb	r0, r3
 80016a6:	491d      	ldr	r1, [pc, #116]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3301      	adds	r3, #1
 80016b2:	4602      	mov	r2, r0
 80016b4:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = Brightness;
 80016b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ba:	4918      	ldr	r1, [pc, #96]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	3302      	adds	r3, #2
 80016c6:	78ba      	ldrb	r2, [r7, #2]
 80016c8:	701a      	strb	r2, [r3, #0]
			break;
 80016ca:	e022      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
		default:		// case 5:
			ws2812_array[diode_id].r = Brightness;
 80016cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016d0:	4912      	ldr	r1, [pc, #72]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	440b      	add	r3, r1
 80016da:	78ba      	ldrb	r2, [r7, #2]
 80016dc:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].g = (uint8_t)p;
 80016de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016e2:	8a7b      	ldrh	r3, [r7, #18]
 80016e4:	b2d8      	uxtb	r0, r3
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	3301      	adds	r3, #1
 80016f2:	4602      	mov	r2, r0
 80016f4:	701a      	strb	r2, [r3, #0]
			ws2812_array[diode_id].b = (uint8_t)q;
 80016f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	b2d8      	uxtb	r0, r3
 80016fe:	4907      	ldr	r1, [pc, #28]	; (800171c <WS2812B_SetDiodeHSV+0x2d4>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	440b      	add	r3, r1
 8001708:	3302      	adds	r3, #2
 800170a:	4602      	mov	r2, r0
 800170c:	701a      	strb	r2, [r3, #0]
			break;
 800170e:	e000      	b.n	8001712 <WS2812B_SetDiodeHSV+0x2ca>
	if(diode_id >= WS2812_LEDS || diode_id < 0) return;
 8001710:	bf00      	nop
		}
	}
}
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bc90      	pop	{r4, r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000598 	.word	0x20000598
 8001720:	88888889 	.word	0x88888889

08001724 <HAL_TIM_PWM_PulseFinishedCallback>:
	ws2812_array[id].r=(color>>16)&0xff;
	ws2812_array[id].g=(color>>8)&0xff;
	ws2812_array[id].b=(color)&0xff;
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_TIM_PWM_PulseFinishedCallback+0x188>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f040 80b5 	bne.w	80018a2 <HAL_TIM_PWM_PulseFinishedCallback+0x17e>
	{
		if (reset_flag!=2)
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d014      	beq.n	800176a <HAL_TIM_PWM_PulseFinishedCallback+0x46>
		{
			for (uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e007      	b.n	8001756 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			{
				buffer[k] = 0x00;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800174a:	2100      	movs	r1, #0
 800174c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3301      	adds	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b17      	cmp	r3, #23
 800175a:	d9f4      	bls.n	8001746 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
			}
			reset_flag++; // End reset signal
 800175c:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8001766:	701a      	strb	r2, [r3, #0]
				j++;
			}
			led++;
		}
	}
}
 8001768:	e09b      	b.n	80018a2 <HAL_TIM_PWM_PulseFinishedCallback+0x17e>
		else if (led > WS2812_LEDS)
 800176a:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d906      	bls.n	8001780 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
			HAL_TIM_PWM_Stop_DMA(ws2812_tim, TIM_CHANNEL_1);
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f001 ff35 	bl	80035e8 <HAL_TIM_PWM_Stop_DMA>
}
 800177e:	e090      	b.n	80018a2 <HAL_TIM_PWM_PulseFinishedCallback+0x17e>
			uint8_t j = 24;
 8001780:	2318      	movs	r3, #24
 8001782:	73bb      	strb	r3, [r7, #14]
			for (int8_t k = 7; k >= 0; k--)
 8001784:	2307      	movs	r3, #7
 8001786:	737b      	strb	r3, [r7, #13]
 8001788:	e026      	b.n	80017d8 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
				if ((ws2812_array[led].g & (1 << k)) == 0)
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4a4b      	ldr	r2, [pc, #300]	; (80018c0 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001792:	460b      	mov	r3, r1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	440b      	add	r3, r1
 8001798:	4413      	add	r3, r2
 800179a:	3301      	adds	r3, #1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017a4:	fa42 f303 	asr.w	r3, r2, r3
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_TIM_PWM_PulseFinishedCallback+0x98>
					buffer[j] = zero;
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80017b4:	2122      	movs	r1, #34	; 0x22
 80017b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017ba:	e004      	b.n	80017c6 <HAL_TIM_PWM_PulseFinishedCallback+0xa2>
					buffer[j] = one;
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	4a3d      	ldr	r2, [pc, #244]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80017c0:	214f      	movs	r1, #79	; 0x4f
 80017c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				j++;
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73bb      	strb	r3, [r7, #14]
			for (int8_t k = 7; k >= 0; k--)
 80017cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
 80017d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dad4      	bge.n	800178a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
			for (int8_t k = 7; k >= 0; k--)
 80017e0:	2307      	movs	r3, #7
 80017e2:	733b      	strb	r3, [r7, #12]
 80017e4:	e025      	b.n	8001832 <HAL_TIM_PWM_PulseFinishedCallback+0x10e>
				if ((ws2812_array[led].r & (1 << k)) == 0)
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80017fe:	fa42 f303 	asr.w	r3, r2, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
					buffer[j] = zero;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800180e:	2122      	movs	r1, #34	; 0x22
 8001810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001814:	e004      	b.n	8001820 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>
					buffer[j] = one;
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800181a:	214f      	movs	r1, #79	; 0x4f
 800181c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				j++;
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	3301      	adds	r3, #1
 8001824:	73bb      	strb	r3, [r7, #14]
			for (int8_t k = 7; k >= 0; k--)
 8001826:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	733b      	strb	r3, [r7, #12]
 8001832:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	dad5      	bge.n	80017e6 <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
			for (int8_t k = 7; k >= 0; k--)
 800183a:	2307      	movs	r3, #7
 800183c:	72fb      	strb	r3, [r7, #11]
 800183e:	e026      	b.n	800188e <HAL_TIM_PWM_PulseFinishedCallback+0x16a>
				if ((ws2812_array[led].b & (1 << k)) == 0)
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001848:	460b      	mov	r3, r1
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	4413      	add	r3, r2
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800185a:	fa42 f303 	asr.w	r3, r2, r3
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_TIM_PWM_PulseFinishedCallback+0x14e>
					buffer[j] = zero;
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800186a:	2122      	movs	r1, #34	; 0x22
 800186c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001870:	e004      	b.n	800187c <HAL_TIM_PWM_PulseFinishedCallback+0x158>
					buffer[j] = one;
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8001876:	214f      	movs	r1, #79	; 0x4f
 8001878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				j++;
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	3301      	adds	r3, #1
 8001880:	73bb      	strb	r3, [r7, #14]
			for (int8_t k = 7; k >= 0; k--)
 8001882:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	72fb      	strb	r3, [r7, #11]
 800188e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001892:	2b00      	cmp	r3, #0
 8001894:	dad4      	bge.n	8001840 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
			led++;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 80018a0:	801a      	strh	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	200005bc 	.word	0x200005bc
 80018b4:	200004d4 	.word	0x200004d4
 80018b8:	20000028 	.word	0x20000028
 80018bc:	20000594 	.word	0x20000594
 80018c0:	20000598 	.word	0x20000598

080018c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5e      	ldr	r2, [pc, #376]	; (8001a4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x188>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f040 80b5 	bne.w	8001a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17e>
	{
		if (reset_flag!=2)
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d014      	beq.n	800190a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x46>
		{
			for (uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e007      	b.n	80018f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
			{
				buffer[k] = 0x00;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b17      	cmp	r3, #23
 80018fa:	d9f4      	bls.n	80018e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x22>
			}
			reset_flag++; // End reset signal
 80018fc:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18c>)
 8001906:	701a      	strb	r2, [r3, #0]
				}
				led++;
			}
		}
	}
}
 8001908:	e09b      	b.n	8001a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17e>
			if (led > WS2812_LEDS)
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d906      	bls.n	8001920 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5c>
				HAL_TIM_PWM_Stop_DMA(ws2812_tim, TIM_CHANNEL_1);
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x198>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fe65 	bl	80035e8 <HAL_TIM_PWM_Stop_DMA>
}
 800191e:	e090      	b.n	8001a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17e>
				uint8_t j = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	73bb      	strb	r3, [r7, #14]
				for (int8_t k = 7; k >= 0; k--)
 8001924:	2307      	movs	r3, #7
 8001926:	737b      	strb	r3, [r7, #13]
 8001928:	e026      	b.n	8001978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb4>
					if ((ws2812_array[led].g & (1 << k)) == 0)
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x19c>)
 8001932:	460b      	mov	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	440b      	add	r3, r1
 8001938:	4413      	add	r3, r2
 800193a:	3301      	adds	r3, #1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001944:	fa42 f303 	asr.w	r3, r2, r3
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
						buffer[j] = zero;
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 8001954:	2122      	movs	r1, #34	; 0x22
 8001956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800195a:	e004      	b.n	8001966 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa2>
						buffer[j] = one;
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 8001960:	214f      	movs	r1, #79	; 0x4f
 8001962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					j++;
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	3301      	adds	r3, #1
 800196a:	73bb      	strb	r3, [r7, #14]
				for (int8_t k = 7; k >= 0; k--)
 800196c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	737b      	strb	r3, [r7, #13]
 8001978:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dad4      	bge.n	800192a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
				for (int8_t k = 7; k >= 0; k--)
 8001980:	2307      	movs	r3, #7
 8001982:	733b      	strb	r3, [r7, #12]
 8001984:	e025      	b.n	80019d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10e>
					if ((ws2812_array[led].r & (1 << k)) == 0)
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4a34      	ldr	r2, [pc, #208]	; (8001a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x19c>)
 800198e:	460b      	mov	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	440b      	add	r3, r1
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf2>
						buffer[j] = zero;
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 80019ae:	2122      	movs	r1, #34	; 0x22
 80019b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80019b4:	e004      	b.n	80019c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>
						buffer[j] = one;
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 80019ba:	214f      	movs	r1, #79	; 0x4f
 80019bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					j++;
 80019c0:	7bbb      	ldrb	r3, [r7, #14]
 80019c2:	3301      	adds	r3, #1
 80019c4:	73bb      	strb	r3, [r7, #14]
				for (int8_t k = 7; k >= 0; k--)
 80019c6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	733b      	strb	r3, [r7, #12]
 80019d2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dad5      	bge.n	8001986 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc2>
				for (int8_t k = 7; k >= 0; k--)
 80019da:	2307      	movs	r3, #7
 80019dc:	72fb      	strb	r3, [r7, #11]
 80019de:	e026      	b.n	8001a2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
					if ((ws2812_array[led].b & (1 << k)) == 0)
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x19c>)
 80019e8:	460b      	mov	r3, r1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	440b      	add	r3, r1
 80019ee:	4413      	add	r3, r2
 80019f0:	3302      	adds	r3, #2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80019fa:	fa42 f303 	asr.w	r3, r2, r3
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14e>
						buffer[j] = zero;
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 8001a0a:	2122      	movs	r1, #34	; 0x22
 8001a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001a10:	e004      	b.n	8001a1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x158>
						buffer[j] = one;
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 8001a16:	214f      	movs	r1, #79	; 0x4f
 8001a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					j++;
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	73bb      	strb	r3, [r7, #14]
				for (int8_t k = 7; k >= 0; k--)
 8001a22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	72fb      	strb	r3, [r7, #11]
 8001a2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dad4      	bge.n	80019e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x11c>
				led++;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 8001a40:	801a      	strh	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40000c00 	.word	0x40000c00
 8001a50:	200005bc 	.word	0x200005bc
 8001a54:	200004d4 	.word	0x200004d4
 8001a58:	20000028 	.word	0x20000028
 8001a5c:	20000594 	.word	0x20000594
 8001a60:	20000598 	.word	0x20000598

08001a64 <ws2812_stroboskopHSV>:
		break;
	}
	}
}
void ws2812_stroboskopHSV(uint8_t sa,uint16_t h,uint8_t s, uint8_t v)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	4603      	mov	r3, r0
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	70fb      	strb	r3, [r7, #3]
	switch(sa%2)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <ws2812_stroboskopHSV+0x2e>
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d013      	beq.n	8001ab8 <ws2812_stroboskopHSV+0x54>
			WS2812B_SetDiodeHSV(i, h, s, v);
		}
		break;
	}
	}
}
 8001a90:	e025      	b.n	8001ade <ws2812_stroboskopHSV+0x7a>
		ws2812_clear();
 8001a92:	f7ff fcc1 	bl	8001418 <ws2812_clear>
		for(int i=0;i<WS2812_LEDS;i+=2)
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e009      	b.n	8001ab0 <ws2812_stroboskopHSV+0x4c>
			WS2812B_SetDiodeHSV(i, h, s, v);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	b218      	sxth	r0, r3
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	79ba      	ldrb	r2, [r7, #6]
 8001aa4:	88b9      	ldrh	r1, [r7, #4]
 8001aa6:	f7ff fccf 	bl	8001448 <WS2812B_SetDiodeHSV>
		for(int i=0;i<WS2812_LEDS;i+=2)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3302      	adds	r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b0b      	cmp	r3, #11
 8001ab4:	ddf2      	ble.n	8001a9c <ws2812_stroboskopHSV+0x38>
		break;
 8001ab6:	e012      	b.n	8001ade <ws2812_stroboskopHSV+0x7a>
		ws2812_clear();
 8001ab8:	f7ff fcae 	bl	8001418 <ws2812_clear>
		for(int i=1;i<WS2812_LEDS;i+=2)
 8001abc:	2301      	movs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	e009      	b.n	8001ad6 <ws2812_stroboskopHSV+0x72>
			WS2812B_SetDiodeHSV(i, h, s, v);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	b218      	sxth	r0, r3
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	79ba      	ldrb	r2, [r7, #6]
 8001aca:	88b9      	ldrh	r1, [r7, #4]
 8001acc:	f7ff fcbc 	bl	8001448 <WS2812B_SetDiodeHSV>
		for(int i=1;i<WS2812_LEDS;i+=2)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b0b      	cmp	r3, #11
 8001ada:	ddf2      	ble.n	8001ac2 <ws2812_stroboskopHSV+0x5e>
		break;
 8001adc:	bf00      	nop
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
	...

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b12:	f7ff faef 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f002 fd0f 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff f9a1 	bl	8000e60 <main>
  bx  lr    
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b2c:	08005818 	.word	0x08005818
  ldr r2, =_sbss
 8001b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b34:	200005c4 	.word	0x200005c4

08001b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_Init+0x40>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_Init+0x40>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_Init+0x40>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f94f 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f000 f808 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff fa5a 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f967 	bl	8001e72 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 f92f 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008
 8001c04:	200005c0 	.word	0x200005c0

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200005c0 	.word	0x200005c0

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff feb6 	bl	8001c08 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e099      	b.n	8001fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eca:	f7ff fe9d 	bl	8001c08 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d908      	bls.n	8001eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e078      	b.n	8001fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e8      	bne.n	8001eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_DMA_Init+0x158>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d117      	bne.n	8001fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fa91 	bl	80024b8 <DMA_CheckFifoParam>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001faa:	2301      	movs	r3, #1
 8001fac:	e016      	b.n	8001fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa48 	bl	800244c <DMA_CalcBaseAndBitshift>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f010803f 	.word	0xf010803f

08001fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_DMA_Start_IT+0x26>
 800200a:	2302      	movs	r3, #2
 800200c:	e040      	b.n	8002090 <HAL_DMA_Start_IT+0xa8>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12f      	bne.n	8002082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f9da 	bl	80023f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0216 	orr.w	r2, r2, #22
 8002056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0208 	orr.w	r2, r2, #8
 800206e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00c      	b.n	80020d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_DMA_IRQHandler+0x258>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_DMA_IRQHandler+0x25c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808e 	beq.w	800237a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8086 	beq.w	800237a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07d      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e078      	b.n	80023e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01c      	beq.n	800233c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d030      	beq.n	800237a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02b      	b.n	800237a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d027      	beq.n	800237a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
 8002332:	e022      	b.n	800237a <HAL_DMA_IRQHandler+0x29e>
 8002334:	20000000 	.word	0x20000000
 8002338:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10f      	bne.n	800236a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0210 	bic.w	r2, r2, #16
 8002358:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d032      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d022      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d307      	bcc.n	80023c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f2      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x2ca>
 80023c0:	e000      	b.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023e6:	bf00      	nop
    }
  }
}
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop

080023f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3b10      	subs	r3, #16
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <DMA_CalcBaseAndBitshift+0x64>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d909      	bls.n	800248e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	659a      	str	r2, [r3, #88]	; 0x58
 800248c:	e007      	b.n	800249e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	aaaaaaab 	.word	0xaaaaaaab
 80024b4:	08005628 	.word	0x08005628

080024b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0x5a>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d856      	bhi.n	8002586 <DMA_CheckFifoParam+0xce>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <DMA_CheckFifoParam+0x28>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	08002503 	.word	0x08002503
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002587 	.word	0x08002587
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d046      	beq.n	800258a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e043      	b.n	800258a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250a:	d140      	bne.n	800258e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e03d      	b.n	800258e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d121      	bne.n	8002560 <DMA_CheckFifoParam+0xa8>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d837      	bhi.n	8002592 <DMA_CheckFifoParam+0xda>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x70>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	08002539 	.word	0x08002539
 800252c:	0800253f 	.word	0x0800253f
 8002530:	08002539 	.word	0x08002539
 8002534:	08002551 	.word	0x08002551
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e030      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d025      	beq.n	8002596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e022      	b.n	8002596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800255e:	e01c      	b.n	800259a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d903      	bls.n	800256e <DMA_CheckFifoParam+0xb6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800256c:	e018      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e015      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e00b      	b.n	800259e <DMA_CheckFifoParam+0xe6>
      break;
 8002586:	bf00      	nop
 8002588:	e00a      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e008      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e006      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e004      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
    }
  } 
  
  return status; 
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e159      	b.n	8002880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f040 8148 	bne.w	800287a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d005      	beq.n	8002602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d130      	bne.n	8002664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0201 	and.w	r2, r3, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b03      	cmp	r3, #3
 800266e:	d017      	beq.n	80026a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d123      	bne.n	80026f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a2 	beq.w	800287a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b57      	ldr	r3, [pc, #348]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002752:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x2ec>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_GPIO_Init+0x2f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d019      	beq.n	80027b2 <HAL_GPIO_Init+0x202>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_GPIO_Init+0x2f4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0x1fe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <HAL_GPIO_Init+0x2f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00d      	beq.n	80027aa <HAL_GPIO_Init+0x1fa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_GPIO_Init+0x2fc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x1f6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <HAL_GPIO_Init+0x300>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x1f2>
 800279e:	2304      	movs	r3, #4
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027a2:	2307      	movs	r3, #7
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c4:	4935      	ldr	r1, [pc, #212]	; (800289c <HAL_GPIO_Init+0x2ec>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f6:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_GPIO_Init+0x304>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f aea2 	bls.w	80025cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e264      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d075      	beq.n	80029c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d6:	4ba3      	ldr	r3, [pc, #652]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d00c      	beq.n	80028fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d112      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b9d      	ldr	r3, [pc, #628]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fa:	d10b      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	4b99      	ldr	r3, [pc, #612]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x108>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d157      	bne.n	80029c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e23f      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x74>
 800291e:	4b91      	ldr	r3, [pc, #580]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a90      	ldr	r2, [pc, #576]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x98>
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a87      	ldr	r2, [pc, #540]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 8002950:	4b84      	ldr	r3, [pc, #528]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a83      	ldr	r2, [pc, #524]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a80      	ldr	r2, [pc, #512]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff f94a 	bl	8001c08 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff f946 	bl	8001c08 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e204      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xc0>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff f936 	bl	8001c08 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff f932 	bl	8001c08 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1f0      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0xe8>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1c4      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4952      	ldr	r1, [pc, #328]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <HAL_RCC_OscConfig+0x2b0>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7ff f8eb 	bl	8001c08 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a36:	f7ff f8e7 	bl	8001c08 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1a5      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4940      	ldr	r1, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_OscConfig+0x2b0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff f8ca 	bl	8001c08 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff f8c6 	bl	8001c08 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e184      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d030      	beq.n	8002b04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_RCC_OscConfig+0x2b4>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff f8aa 	bl	8001c08 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f8a6 	bl	8001c08 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e164      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x200>
 8002ad6:	e015      	b.n	8002b04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x2b4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f893 	bl	8001c08 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7ff f88f 	bl	8001c08 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e14d      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a0 	beq.w	8002c52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_OscConfig+0x2b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_RCC_OscConfig+0x2b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_RCC_OscConfig+0x2b8>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f855 	bl	8001c08 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e011      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ce>
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	42470000 	.word	0x42470000
 8002b6c:	42470e80 	.word	0x42470e80
 8002b70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7ff f848 	bl	8001c08 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e106      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_OscConfig+0x4e4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2f0>
 8002b9a:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a80      	ldr	r2, [pc, #512]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	e01c      	b.n	8002be2 <HAL_RCC_OscConfig+0x32a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x312>
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e00b      	b.n	8002be2 <HAL_RCC_OscConfig+0x32a>
 8002bca:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a74      	ldr	r2, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a71      	ldr	r2, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7ff f80d 	bl	8001c08 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7ff f809 	bl	8001c08 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0c5      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ee      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x33a>
 8002c14:	e014      	b.n	8002c40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fff7 	bl	8001c08 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fff3 	bl	8001c08 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0af      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 809b 	beq.w	8002d92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d05c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d141      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x4ec>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe ffc7 	bl	8001c08 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe ffc3 	bl	8001c08 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e081      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	019b      	lsls	r3, r3, #6
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	4937      	ldr	r1, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x4ec>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe ff9c 	bl	8001c08 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe ff98 	bl	8001c08 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e056      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x41c>
 8002cf2:	e04e      	b.n	8002d92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe ff85 	bl	8001c08 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe ff81 	bl	8001c08 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e03f      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x44a>
 8002d20:	e037      	b.n	8002d92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e032      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d028      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d121      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d11a      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	42470060 	.word	0x42470060

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe feb6 	bl	8001c08 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe feb2 	bl	8001c08 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fe16 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08005618 	.word	0x08005618
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	2300      	movs	r3, #0
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80bd 	bhi.w	8003118 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e0b7      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002faa:	60bb      	str	r3, [r7, #8]
       break;
 8002fac:	e0b7      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fb0:	60bb      	str	r3, [r7, #8]
      break;
 8002fb2:	e0b4      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04d      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b58      	ldr	r3, [pc, #352]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	ea02 0800 	and.w	r8, r2, r0
 8002fe2:	ea03 0901 	and.w	r9, r3, r1
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	4649      	mov	r1, r9
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	014b      	lsls	r3, r1, #5
 8002ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff8:	0142      	lsls	r2, r0, #5
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	ebb0 0008 	subs.w	r0, r0, r8
 8003002:	eb61 0109 	sbc.w	r1, r1, r9
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	018b      	lsls	r3, r1, #6
 8003010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003014:	0182      	lsls	r2, r0, #6
 8003016:	1a12      	subs	r2, r2, r0
 8003018:	eb63 0301 	sbc.w	r3, r3, r1
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	00d9      	lsls	r1, r3, #3
 8003026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800302a:	00d0      	lsls	r0, r2, #3
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	eb12 0208 	adds.w	r2, r2, r8
 8003034:	eb43 0309 	adc.w	r3, r3, r9
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	0259      	lsls	r1, r3, #9
 8003042:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003046:	0250      	lsls	r0, r2, #9
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f7fd fd3c 	bl	8000ad4 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e04a      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	ea02 0400 	and.w	r4, r2, r0
 800307e:	ea03 0501 	and.w	r5, r3, r1
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	014b      	lsls	r3, r1, #5
 8003090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003094:	0142      	lsls	r2, r0, #5
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	1b00      	subs	r0, r0, r4
 800309c:	eb61 0105 	sbc.w	r1, r1, r5
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	018b      	lsls	r3, r1, #6
 80030aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ae:	0182      	lsls	r2, r0, #6
 80030b0:	1a12      	subs	r2, r2, r0
 80030b2:	eb63 0301 	sbc.w	r3, r3, r1
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	00d9      	lsls	r1, r3, #3
 80030c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c4:	00d0      	lsls	r0, r2, #3
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	1912      	adds	r2, r2, r4
 80030cc:	eb45 0303 	adc.w	r3, r5, r3
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0299      	lsls	r1, r3, #10
 80030da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030de:	0290      	lsls	r0, r2, #10
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f7fd fcf0 	bl	8000ad4 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4613      	mov	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800311a:	60bb      	str	r3, [r7, #8]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	68bb      	ldr	r3, [r7, #8]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	00f42400 	.word	0x00f42400
 8003134:	007a1200 	.word	0x007a1200

08003138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e041      	b.n	80031ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe f850 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f000 fe90 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e041      	b.n	800326c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f839 	bl	8003274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fe41 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e022      	b.n	80032fa <HAL_TIM_PWM_Start_DMA+0x72>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d109      	bne.n	80032ce <HAL_TIM_PWM_Start_DMA+0x46>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e015      	b.n	80032fa <HAL_TIM_PWM_Start_DMA+0x72>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d109      	bne.n	80032e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e008      	b.n	80032fa <HAL_TIM_PWM_Start_DMA+0x72>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	e15d      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_TIM_PWM_Start_DMA+0x94>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e022      	b.n	8003362 <HAL_TIM_PWM_Start_DMA+0xda>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b04      	cmp	r3, #4
 8003320:	d109      	bne.n	8003336 <HAL_TIM_PWM_Start_DMA+0xae>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e015      	b.n	8003362 <HAL_TIM_PWM_Start_DMA+0xda>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d109      	bne.n	8003350 <HAL_TIM_PWM_Start_DMA+0xc8>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e008      	b.n	8003362 <HAL_TIM_PWM_Start_DMA+0xda>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start_DMA+0xee>
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e123      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start_DMA+0xfe>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	e016      	b.n	80033b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start_DMA+0x10e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	e00e      	b.n	80033b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	e006      	b.n	80033b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ae:	e001      	b.n	80033b4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e104      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	f200 80ae 	bhi.w	8003518 <HAL_TIM_PWM_Start_DMA+0x290>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003519 	.word	0x08003519
 80033cc:	08003519 	.word	0x08003519
 80033d0:	08003519 	.word	0x08003519
 80033d4:	08003441 	.word	0x08003441
 80033d8:	08003519 	.word	0x08003519
 80033dc:	08003519 	.word	0x08003519
 80033e0:	08003519 	.word	0x08003519
 80033e4:	08003489 	.word	0x08003489
 80033e8:	08003519 	.word	0x08003519
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003519 	.word	0x08003519
 80033f4:	080034d1 	.word	0x080034d1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	4a72      	ldr	r2, [pc, #456]	; (80035c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	4a71      	ldr	r2, [pc, #452]	; (80035cc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	4a70      	ldr	r2, [pc, #448]	; (80035d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800340e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3334      	adds	r3, #52	; 0x34
 800341c:	461a      	mov	r2, r3
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	f7fe fde2 	bl	8001fe8 <HAL_DMA_Start_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0c7      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	60da      	str	r2, [r3, #12]
      break;
 800343e:	e06e      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	4a60      	ldr	r2, [pc, #384]	; (80035c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	4a5f      	ldr	r2, [pc, #380]	; (80035cc <HAL_TIM_PWM_Start_DMA+0x344>)
 800344e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003456:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3338      	adds	r3, #56	; 0x38
 8003464:	461a      	mov	r2, r3
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	f7fe fdbe 	bl	8001fe8 <HAL_DMA_Start_IT>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0a3      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	60da      	str	r2, [r3, #12]
      break;
 8003486:	e04a      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a4e      	ldr	r2, [pc, #312]	; (80035c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800349e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	333c      	adds	r3, #60	; 0x3c
 80034ac:	461a      	mov	r2, r3
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	f7fe fd9a 	bl	8001fe8 <HAL_DMA_Start_IT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034cc:	60da      	str	r2, [r3, #12]
      break;
 80034ce:	e026      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <HAL_TIM_PWM_Start_DMA+0x344>)
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3340      	adds	r3, #64	; 0x40
 80034f4:	461a      	mov	r2, r3
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	f7fe fd76 	bl	8001fe8 <HAL_DMA_Start_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e05b      	b.n	80035be <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003514:	60da      	str	r2, [r3, #12]
      break;
 8003516:	e002      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	bf00      	nop
  }

  if (status == HAL_OK)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d14b      	bne.n	80035bc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 ff5b 	bl	80043e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d107      	bne.n	800354c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0x300>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d013      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0x300>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0x300>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIM_PWM_Start_DMA+0x354>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0x300>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_PWM_Start_DMA+0x300>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d010      	beq.n	80035bc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e007      	b.n	80035bc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	08003d8d 	.word	0x08003d8d
 80035cc:	08003e35 	.word	0x08003e35
 80035d0:	08003cfb 	.word	0x08003cfb
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40014000 	.word	0x40014000

080035e8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d855      	bhi.n	80036a8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003639 	.word	0x08003639
 8003608:	080036a9 	.word	0x080036a9
 800360c:	080036a9 	.word	0x080036a9
 8003610:	080036a9 	.word	0x080036a9
 8003614:	08003655 	.word	0x08003655
 8003618:	080036a9 	.word	0x080036a9
 800361c:	080036a9 	.word	0x080036a9
 8003620:	080036a9 	.word	0x080036a9
 8003624:	08003671 	.word	0x08003671
 8003628:	080036a9 	.word	0x080036a9
 800362c:	080036a9 	.word	0x080036a9
 8003630:	080036a9 	.word	0x080036a9
 8003634:	0800368d 	.word	0x0800368d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003646:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fd23 	bl	8002098 <HAL_DMA_Abort_IT>
      break;
 8003652:	e02c      	b.n	80036ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fd15 	bl	8002098 <HAL_DMA_Abort_IT>
      break;
 800366e:	e01e      	b.n	80036ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fd07 	bl	8002098 <HAL_DMA_Abort_IT>
      break;
 800368a:	e010      	b.n	80036ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800369a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fcf9 	bl	8002098 <HAL_DMA_Abort_IT>
      break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d157      	bne.n	8003764 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fe93 	bl	80043e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d117      	bne.n	80036fc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10f      	bne.n	80036fc <HAL_TIM_PWM_Stop_DMA+0x114>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	f240 4344 	movw	r3, #1092	; 0x444
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_PWM_Stop_DMA+0x114>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	f241 1311 	movw	r3, #4369	; 0x1111
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <HAL_TIM_PWM_Stop_DMA+0x144>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	f240 4344 	movw	r3, #1092	; 0x444
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_TIM_PWM_Stop_DMA+0x144>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <HAL_TIM_PWM_Stop_DMA+0x154>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373a:	e013      	b.n	8003764 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d104      	bne.n	800374c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374a:	e00b      	b.n	8003764 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b08      	cmp	r3, #8
 8003750:	d104      	bne.n	800375c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375a:	e003      	b.n	8003764 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000

08003774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0202 	mvn.w	r2, #2
 80037a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fa81 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa73 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd ffad 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0204 	mvn.w	r2, #4
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa57 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa49 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fd ff83 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0208 	mvn.w	r2, #8
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2204      	movs	r2, #4
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa2d 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa1f 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd ff59 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b10      	cmp	r3, #16
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b10      	cmp	r3, #16
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0210 	mvn.w	r2, #16
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2208      	movs	r2, #8
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa03 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9f5 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd ff2f 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0201 	mvn.w	r2, #1
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9cf 	bl	8003c96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fe00 	bl	8004524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9c1 	bl	8003cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0220 	mvn.w	r2, #32
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fdca 	bl	8004510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0ae      	b.n	8003b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	f200 809f 	bhi.w	8003af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003af1 	.word	0x08003af1
 80039c0:	08003af1 	.word	0x08003af1
 80039c4:	08003af1 	.word	0x08003af1
 80039c8:	08003a2d 	.word	0x08003a2d
 80039cc:	08003af1 	.word	0x08003af1
 80039d0:	08003af1 	.word	0x08003af1
 80039d4:	08003af1 	.word	0x08003af1
 80039d8:	08003a6f 	.word	0x08003a6f
 80039dc:	08003af1 	.word	0x08003af1
 80039e0:	08003af1 	.word	0x08003af1
 80039e4:	08003af1 	.word	0x08003af1
 80039e8:	08003aaf 	.word	0x08003aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fad2 	bl	8003f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0208 	orr.w	r2, r2, #8
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	619a      	str	r2, [r3, #24]
      break;
 8003a2a:	e064      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fb18 	bl	8004068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]
      break;
 8003a6c:	e043      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fb63 	bl	8004140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0208 	orr.w	r2, r2, #8
 8003a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0204 	bic.w	r2, r2, #4
 8003a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	61da      	str	r2, [r3, #28]
      break;
 8003aac:	e023      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fbad 	bl	8004214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	021a      	lsls	r2, r3, #8
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	61da      	str	r2, [r3, #28]
      break;
 8003aee:	e002      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x1c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0b4      	b.n	8003c8e <HAL_TIM_ConfigClockSource+0x186>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5c:	d03e      	beq.n	8003bdc <HAL_TIM_ConfigClockSource+0xd4>
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	f200 8087 	bhi.w	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6a:	f000 8086 	beq.w	8003c7a <HAL_TIM_ConfigClockSource+0x172>
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	d87f      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b70      	cmp	r3, #112	; 0x70
 8003b76:	d01a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0xa6>
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d87b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b60      	cmp	r3, #96	; 0x60
 8003b7e:	d050      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x11a>
 8003b80:	2b60      	cmp	r3, #96	; 0x60
 8003b82:	d877      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b50      	cmp	r3, #80	; 0x50
 8003b86:	d03c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xfa>
 8003b88:	2b50      	cmp	r3, #80	; 0x50
 8003b8a:	d873      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d058      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x13a>
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d86f      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b30      	cmp	r3, #48	; 0x30
 8003b96:	d064      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d86b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d060      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d867      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05c      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d05a      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003bac:	e062      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6899      	ldr	r1, [r3, #8]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f000 fbf3 	bl	80043a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	609a      	str	r2, [r3, #8]
      break;
 8003bda:	e04f      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f000 fbdc 	bl	80043a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfe:	609a      	str	r2, [r3, #8]
      break;
 8003c00:	e03c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fb50 	bl	80042b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2150      	movs	r1, #80	; 0x50
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fba9 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e02c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fb6f 	bl	8004312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2160      	movs	r1, #96	; 0x60
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb99 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e01c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fb30 	bl	80042b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb89 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e00c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f000 fb80 	bl	8004372 <TIM_ITRx_SetConfig>
      break;
 8003c72:	e003      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e000      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d107      	bne.n	8003d22 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	e02a      	b.n	8003d78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d107      	bne.n	8003d3c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3a:	e01d      	b.n	8003d78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d107      	bne.n	8003d56 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e010      	b.n	8003d78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2208      	movs	r2, #8
 8003d64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6e:	e003      	b.n	8003d78 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ffb4 	bl	8003ce6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d10b      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d136      	bne.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dba:	e031      	b.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10b      	bne.n	8003dde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d125      	bne.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	e020      	b.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d10b      	bne.n	8003e00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2204      	movs	r2, #4
 8003dec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfe:	e00f      	b.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d10a      	bne.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7fd fc7f 	bl	8001724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d103      	bne.n	8003e54 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	771a      	strb	r2, [r3, #28]
 8003e52:	e019      	b.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d103      	bne.n	8003e66 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]
 8003e64:	e010      	b.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d103      	bne.n	8003e78 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2204      	movs	r2, #4
 8003e74:	771a      	strb	r2, [r3, #28]
 8003e76:	e007      	b.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d102      	bne.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2208      	movs	r2, #8
 8003e86:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fd fd1b 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <TIM_Base_SetConfig+0xe4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <TIM_Base_SetConfig+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <TIM_Base_SetConfig+0xec>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <TIM_Base_SetConfig+0xf0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <TIM_Base_SetConfig+0xe4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <TIM_Base_SetConfig+0xe8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <TIM_Base_SetConfig+0xec>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <TIM_Base_SetConfig+0xf0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <TIM_Base_SetConfig+0xf4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <TIM_Base_SetConfig+0xf8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <TIM_Base_SetConfig+0xfc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <TIM_Base_SetConfig+0xe4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800

08003f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0302 	bic.w	r3, r3, #2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <TIM_OC1_SetConfig+0xc8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10c      	bne.n	8004012 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0308 	bic.w	r3, r3, #8
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <TIM_OC1_SetConfig+0xc8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40010000 	.word	0x40010000

08004068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0210 	bic.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0320 	bic.w	r3, r3, #32
 80040b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a1e      	ldr	r2, [pc, #120]	; (800413c <TIM_OC2_SetConfig+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d10d      	bne.n	80040e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM_OC2_SetConfig+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d113      	bne.n	8004114 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000

08004140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <TIM_OC3_SetConfig+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10d      	bne.n	80041ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC3_SetConfig+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d113      	bne.n	80041ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40010000 	.word	0x40010000

08004214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <TIM_OC4_SetConfig+0x9c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000

080042b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f023 030a 	bic.w	r3, r3, #10
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004312:	b480      	push	{r7}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0210 	bic.w	r2, r3, #16
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	031b      	lsls	r3, r3, #12
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800434e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	f043 0307 	orr.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	021a      	lsls	r2, r3, #8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2201      	movs	r2, #1
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1a      	ldr	r2, [r3, #32]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	43db      	mvns	r3, r3
 800440a:	401a      	ands	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1a      	ldr	r2, [r3, #32]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e050      	b.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d013      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10c      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40014000 	.word	0x40014000

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4d0d      	ldr	r5, [pc, #52]	; (8004570 <__libc_init_array+0x38>)
 800453c:	4c0d      	ldr	r4, [pc, #52]	; (8004574 <__libc_init_array+0x3c>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	2600      	movs	r6, #0
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	4d0b      	ldr	r5, [pc, #44]	; (8004578 <__libc_init_array+0x40>)
 800454a:	4c0c      	ldr	r4, [pc, #48]	; (800457c <__libc_init_array+0x44>)
 800454c:	f001 f856 	bl	80055fc <_init>
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	2600      	movs	r6, #0
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	08005810 	.word	0x08005810
 8004574:	08005810 	.word	0x08005810
 8004578:	08005810 	.word	0x08005810
 800457c:	08005814 	.word	0x08005814

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <sin>:
 8004590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004592:	ec53 2b10 	vmov	r2, r3, d0
 8004596:	4826      	ldr	r0, [pc, #152]	; (8004630 <sin+0xa0>)
 8004598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800459c:	4281      	cmp	r1, r0
 800459e:	dc07      	bgt.n	80045b0 <sin+0x20>
 80045a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004628 <sin+0x98>
 80045a4:	2000      	movs	r0, #0
 80045a6:	f000 fe5b 	bl	8005260 <__kernel_sin>
 80045aa:	ec51 0b10 	vmov	r0, r1, d0
 80045ae:	e007      	b.n	80045c0 <sin+0x30>
 80045b0:	4820      	ldr	r0, [pc, #128]	; (8004634 <sin+0xa4>)
 80045b2:	4281      	cmp	r1, r0
 80045b4:	dd09      	ble.n	80045ca <sin+0x3a>
 80045b6:	ee10 0a10 	vmov	r0, s0
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fb fe10 	bl	80001e0 <__aeabi_dsub>
 80045c0:	ec41 0b10 	vmov	d0, r0, r1
 80045c4:	b005      	add	sp, #20
 80045c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ca:	4668      	mov	r0, sp
 80045cc:	f000 f834 	bl	8004638 <__ieee754_rem_pio2>
 80045d0:	f000 0003 	and.w	r0, r0, #3
 80045d4:	2801      	cmp	r0, #1
 80045d6:	d008      	beq.n	80045ea <sin+0x5a>
 80045d8:	2802      	cmp	r0, #2
 80045da:	d00d      	beq.n	80045f8 <sin+0x68>
 80045dc:	b9d0      	cbnz	r0, 8004614 <sin+0x84>
 80045de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045e2:	ed9d 0b00 	vldr	d0, [sp]
 80045e6:	2001      	movs	r0, #1
 80045e8:	e7dd      	b.n	80045a6 <sin+0x16>
 80045ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045ee:	ed9d 0b00 	vldr	d0, [sp]
 80045f2:	f000 fa2d 	bl	8004a50 <__kernel_cos>
 80045f6:	e7d8      	b.n	80045aa <sin+0x1a>
 80045f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045fc:	ed9d 0b00 	vldr	d0, [sp]
 8004600:	2001      	movs	r0, #1
 8004602:	f000 fe2d 	bl	8005260 <__kernel_sin>
 8004606:	ec53 2b10 	vmov	r2, r3, d0
 800460a:	ee10 0a10 	vmov	r0, s0
 800460e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004612:	e7d5      	b.n	80045c0 <sin+0x30>
 8004614:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004618:	ed9d 0b00 	vldr	d0, [sp]
 800461c:	f000 fa18 	bl	8004a50 <__kernel_cos>
 8004620:	e7f1      	b.n	8004606 <sin+0x76>
 8004622:	bf00      	nop
 8004624:	f3af 8000 	nop.w
	...
 8004630:	3fe921fb 	.word	0x3fe921fb
 8004634:	7fefffff 	.word	0x7fefffff

08004638 <__ieee754_rem_pio2>:
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	ed2d 8b02 	vpush	{d8}
 8004640:	ec55 4b10 	vmov	r4, r5, d0
 8004644:	4bca      	ldr	r3, [pc, #808]	; (8004970 <__ieee754_rem_pio2+0x338>)
 8004646:	b08b      	sub	sp, #44	; 0x2c
 8004648:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800464c:	4598      	cmp	r8, r3
 800464e:	4682      	mov	sl, r0
 8004650:	9502      	str	r5, [sp, #8]
 8004652:	dc08      	bgt.n	8004666 <__ieee754_rem_pio2+0x2e>
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	ed80 0b00 	vstr	d0, [r0]
 800465c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004660:	f04f 0b00 	mov.w	fp, #0
 8004664:	e028      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 8004666:	4bc3      	ldr	r3, [pc, #780]	; (8004974 <__ieee754_rem_pio2+0x33c>)
 8004668:	4598      	cmp	r8, r3
 800466a:	dc78      	bgt.n	800475e <__ieee754_rem_pio2+0x126>
 800466c:	9b02      	ldr	r3, [sp, #8]
 800466e:	4ec2      	ldr	r6, [pc, #776]	; (8004978 <__ieee754_rem_pio2+0x340>)
 8004670:	2b00      	cmp	r3, #0
 8004672:	ee10 0a10 	vmov	r0, s0
 8004676:	a3b0      	add	r3, pc, #704	; (adr r3, 8004938 <__ieee754_rem_pio2+0x300>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	4629      	mov	r1, r5
 800467e:	dd39      	ble.n	80046f4 <__ieee754_rem_pio2+0xbc>
 8004680:	f7fb fdae 	bl	80001e0 <__aeabi_dsub>
 8004684:	45b0      	cmp	r8, r6
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	d01b      	beq.n	80046c4 <__ieee754_rem_pio2+0x8c>
 800468c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fda5 	bl	80001e0 <__aeabi_dsub>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	e9ca 2300 	strd	r2, r3, [sl]
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fb fd9d 	bl	80001e0 <__aeabi_dsub>
 80046a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb fd98 	bl	80001e0 <__aeabi_dsub>
 80046b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80046b4:	f04f 0b01 	mov.w	fp, #1
 80046b8:	4658      	mov	r0, fp
 80046ba:	b00b      	add	sp, #44	; 0x2c
 80046bc:	ecbd 8b02 	vpop	{d8}
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fd89 	bl	80001e0 <__aeabi_dsub>
 80046ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	4604      	mov	r4, r0
 80046d6:	460d      	mov	r5, r1
 80046d8:	f7fb fd82 	bl	80001e0 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	e9ca 2300 	strd	r2, r3, [sl]
 80046e4:	4620      	mov	r0, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7fb fd7a 	bl	80001e0 <__aeabi_dsub>
 80046ec:	a398      	add	r3, pc, #608	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	e7db      	b.n	80046ac <__ieee754_rem_pio2+0x74>
 80046f4:	f7fb fd76 	bl	80001e4 <__adddf3>
 80046f8:	45b0      	cmp	r8, r6
 80046fa:	4604      	mov	r4, r0
 80046fc:	460d      	mov	r5, r1
 80046fe:	d016      	beq.n	800472e <__ieee754_rem_pio2+0xf6>
 8004700:	a38f      	add	r3, pc, #572	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb fd6d 	bl	80001e4 <__adddf3>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	e9ca 2300 	strd	r2, r3, [sl]
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fb fd63 	bl	80001e0 <__aeabi_dsub>
 800471a:	a389      	add	r3, pc, #548	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb fd60 	bl	80001e4 <__adddf3>
 8004724:	f04f 3bff 	mov.w	fp, #4294967295
 8004728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800472c:	e7c4      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 800472e:	a386      	add	r3, pc, #536	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fb fd56 	bl	80001e4 <__adddf3>
 8004738:	a385      	add	r3, pc, #532	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	4604      	mov	r4, r0
 8004740:	460d      	mov	r5, r1
 8004742:	f7fb fd4f 	bl	80001e4 <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	e9ca 2300 	strd	r2, r3, [sl]
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd45 	bl	80001e0 <__aeabi_dsub>
 8004756:	a37e      	add	r3, pc, #504	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	e7e0      	b.n	8004720 <__ieee754_rem_pio2+0xe8>
 800475e:	4b87      	ldr	r3, [pc, #540]	; (800497c <__ieee754_rem_pio2+0x344>)
 8004760:	4598      	cmp	r8, r3
 8004762:	f300 80d9 	bgt.w	8004918 <__ieee754_rem_pio2+0x2e0>
 8004766:	f000 fe39 	bl	80053dc <fabs>
 800476a:	ec55 4b10 	vmov	r4, r5, d0
 800476e:	ee10 0a10 	vmov	r0, s0
 8004772:	a379      	add	r3, pc, #484	; (adr r3, 8004958 <__ieee754_rem_pio2+0x320>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	4629      	mov	r1, r5
 800477a:	f7fb fee9 	bl	8000550 <__aeabi_dmul>
 800477e:	4b80      	ldr	r3, [pc, #512]	; (8004980 <__ieee754_rem_pio2+0x348>)
 8004780:	2200      	movs	r2, #0
 8004782:	f7fb fd2f 	bl	80001e4 <__adddf3>
 8004786:	f7fc f97d 	bl	8000a84 <__aeabi_d2iz>
 800478a:	4683      	mov	fp, r0
 800478c:	f7fb fe76 	bl	800047c <__aeabi_i2d>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	ec43 2b18 	vmov	d8, r2, r3
 8004798:	a367      	add	r3, pc, #412	; (adr r3, 8004938 <__ieee754_rem_pio2+0x300>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fed7 	bl	8000550 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fd19 	bl	80001e0 <__aeabi_dsub>
 80047ae:	a364      	add	r3, pc, #400	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	ec51 0b18 	vmov	r0, r1, d8
 80047bc:	f7fb fec8 	bl	8000550 <__aeabi_dmul>
 80047c0:	f1bb 0f1f 	cmp.w	fp, #31
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	dc0d      	bgt.n	80047e6 <__ieee754_rem_pio2+0x1ae>
 80047ca:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <__ieee754_rem_pio2+0x34c>)
 80047cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80047d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d4:	4543      	cmp	r3, r8
 80047d6:	d006      	beq.n	80047e6 <__ieee754_rem_pio2+0x1ae>
 80047d8:	4622      	mov	r2, r4
 80047da:	462b      	mov	r3, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fcfe 	bl	80001e0 <__aeabi_dsub>
 80047e4:	e00f      	b.n	8004806 <__ieee754_rem_pio2+0x1ce>
 80047e6:	462b      	mov	r3, r5
 80047e8:	4622      	mov	r2, r4
 80047ea:	4630      	mov	r0, r6
 80047ec:	4639      	mov	r1, r7
 80047ee:	f7fb fcf7 	bl	80001e0 <__aeabi_dsub>
 80047f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004800:	f1b8 0f10 	cmp.w	r8, #16
 8004804:	dc02      	bgt.n	800480c <__ieee754_rem_pio2+0x1d4>
 8004806:	e9ca 0100 	strd	r0, r1, [sl]
 800480a:	e039      	b.n	8004880 <__ieee754_rem_pio2+0x248>
 800480c:	a34e      	add	r3, pc, #312	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	ec51 0b18 	vmov	r0, r1, d8
 8004816:	f7fb fe9b 	bl	8000550 <__aeabi_dmul>
 800481a:	4604      	mov	r4, r0
 800481c:	460d      	mov	r5, r1
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4630      	mov	r0, r6
 8004824:	4639      	mov	r1, r7
 8004826:	f7fb fcdb 	bl	80001e0 <__aeabi_dsub>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4680      	mov	r8, r0
 8004830:	4689      	mov	r9, r1
 8004832:	4630      	mov	r0, r6
 8004834:	4639      	mov	r1, r7
 8004836:	f7fb fcd3 	bl	80001e0 <__aeabi_dsub>
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	f7fb fccf 	bl	80001e0 <__aeabi_dsub>
 8004842:	a343      	add	r3, pc, #268	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	4604      	mov	r4, r0
 800484a:	460d      	mov	r5, r1
 800484c:	ec51 0b18 	vmov	r0, r1, d8
 8004850:	f7fb fe7e 	bl	8000550 <__aeabi_dmul>
 8004854:	4622      	mov	r2, r4
 8004856:	462b      	mov	r3, r5
 8004858:	f7fb fcc2 	bl	80001e0 <__aeabi_dsub>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fb fcba 	bl	80001e0 <__aeabi_dsub>
 800486c:	9a03      	ldr	r2, [sp, #12]
 800486e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b31      	cmp	r3, #49	; 0x31
 8004876:	dc24      	bgt.n	80048c2 <__ieee754_rem_pio2+0x28a>
 8004878:	e9ca 0100 	strd	r0, r1, [sl]
 800487c:	4646      	mov	r6, r8
 800487e:	464f      	mov	r7, r9
 8004880:	e9da 8900 	ldrd	r8, r9, [sl]
 8004884:	4630      	mov	r0, r6
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	4639      	mov	r1, r7
 800488c:	f7fb fca8 	bl	80001e0 <__aeabi_dsub>
 8004890:	462b      	mov	r3, r5
 8004892:	4622      	mov	r2, r4
 8004894:	f7fb fca4 	bl	80001e0 <__aeabi_dsub>
 8004898:	9b02      	ldr	r3, [sp, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048a0:	f6bf af0a 	bge.w	80046b8 <__ieee754_rem_pio2+0x80>
 80048a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80048ac:	f8ca 8000 	str.w	r8, [sl]
 80048b0:	f8ca 0008 	str.w	r0, [sl, #8]
 80048b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80048bc:	f1cb 0b00 	rsb	fp, fp, #0
 80048c0:	e6fa      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 80048c2:	a327      	add	r3, pc, #156	; (adr r3, 8004960 <__ieee754_rem_pio2+0x328>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	ec51 0b18 	vmov	r0, r1, d8
 80048cc:	f7fb fe40 	bl	8000550 <__aeabi_dmul>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fb fc80 	bl	80001e0 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fb fc78 	bl	80001e0 <__aeabi_dsub>
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	f7fb fc74 	bl	80001e0 <__aeabi_dsub>
 80048f8:	a31b      	add	r3, pc, #108	; (adr r3, 8004968 <__ieee754_rem_pio2+0x330>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	4604      	mov	r4, r0
 8004900:	460d      	mov	r5, r1
 8004902:	ec51 0b18 	vmov	r0, r1, d8
 8004906:	f7fb fe23 	bl	8000550 <__aeabi_dmul>
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f7fb fc67 	bl	80001e0 <__aeabi_dsub>
 8004912:	4604      	mov	r4, r0
 8004914:	460d      	mov	r5, r1
 8004916:	e75f      	b.n	80047d8 <__ieee754_rem_pio2+0x1a0>
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <__ieee754_rem_pio2+0x350>)
 800491a:	4598      	cmp	r8, r3
 800491c:	dd36      	ble.n	800498c <__ieee754_rem_pio2+0x354>
 800491e:	ee10 2a10 	vmov	r2, s0
 8004922:	462b      	mov	r3, r5
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fc5a 	bl	80001e0 <__aeabi_dsub>
 800492c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004930:	e9ca 0100 	strd	r0, r1, [sl]
 8004934:	e694      	b.n	8004660 <__ieee754_rem_pio2+0x28>
 8004936:	bf00      	nop
 8004938:	54400000 	.word	0x54400000
 800493c:	3ff921fb 	.word	0x3ff921fb
 8004940:	1a626331 	.word	0x1a626331
 8004944:	3dd0b461 	.word	0x3dd0b461
 8004948:	1a600000 	.word	0x1a600000
 800494c:	3dd0b461 	.word	0x3dd0b461
 8004950:	2e037073 	.word	0x2e037073
 8004954:	3ba3198a 	.word	0x3ba3198a
 8004958:	6dc9c883 	.word	0x6dc9c883
 800495c:	3fe45f30 	.word	0x3fe45f30
 8004960:	2e000000 	.word	0x2e000000
 8004964:	3ba3198a 	.word	0x3ba3198a
 8004968:	252049c1 	.word	0x252049c1
 800496c:	397b839a 	.word	0x397b839a
 8004970:	3fe921fb 	.word	0x3fe921fb
 8004974:	4002d97b 	.word	0x4002d97b
 8004978:	3ff921fb 	.word	0x3ff921fb
 800497c:	413921fb 	.word	0x413921fb
 8004980:	3fe00000 	.word	0x3fe00000
 8004984:	08005630 	.word	0x08005630
 8004988:	7fefffff 	.word	0x7fefffff
 800498c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004990:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004994:	ee10 0a10 	vmov	r0, s0
 8004998:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800499c:	ee10 6a10 	vmov	r6, s0
 80049a0:	460f      	mov	r7, r1
 80049a2:	f7fc f86f 	bl	8000a84 <__aeabi_d2iz>
 80049a6:	f7fb fd69 	bl	800047c <__aeabi_i2d>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049b6:	f7fb fc13 	bl	80001e0 <__aeabi_dsub>
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <__ieee754_rem_pio2+0x40c>)
 80049bc:	2200      	movs	r2, #0
 80049be:	f7fb fdc7 	bl	8000550 <__aeabi_dmul>
 80049c2:	460f      	mov	r7, r1
 80049c4:	4606      	mov	r6, r0
 80049c6:	f7fc f85d 	bl	8000a84 <__aeabi_d2iz>
 80049ca:	f7fb fd57 	bl	800047c <__aeabi_i2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049da:	f7fb fc01 	bl	80001e0 <__aeabi_dsub>
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <__ieee754_rem_pio2+0x40c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	f7fb fdb5 	bl	8000550 <__aeabi_dmul>
 80049e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049ea:	ad04      	add	r5, sp, #16
 80049ec:	f04f 0803 	mov.w	r8, #3
 80049f0:	46a9      	mov	r9, r5
 80049f2:	2600      	movs	r6, #0
 80049f4:	2700      	movs	r7, #0
 80049f6:	4632      	mov	r2, r6
 80049f8:	463b      	mov	r3, r7
 80049fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049fe:	46c3      	mov	fp, r8
 8004a00:	3d08      	subs	r5, #8
 8004a02:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a06:	f7fc f80b 	bl	8000a20 <__aeabi_dcmpeq>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1f3      	bne.n	80049f6 <__ieee754_rem_pio2+0x3be>
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <__ieee754_rem_pio2+0x410>)
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	2302      	movs	r3, #2
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4622      	mov	r2, r4
 8004a18:	465b      	mov	r3, fp
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	4648      	mov	r0, r9
 8004a1e:	f000 f8df 	bl	8004be0 <__kernel_rem_pio2>
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	4683      	mov	fp, r0
 8004a28:	f6bf ae46 	bge.w	80046b8 <__ieee754_rem_pio2+0x80>
 8004a2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a34:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a38:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004a3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a40:	e73a      	b.n	80048b8 <__ieee754_rem_pio2+0x280>
 8004a42:	bf00      	nop
 8004a44:	41700000 	.word	0x41700000
 8004a48:	080056b0 	.word	0x080056b0
 8004a4c:	00000000 	.word	0x00000000

08004a50 <__kernel_cos>:
 8004a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ec57 6b10 	vmov	r6, r7, d0
 8004a58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004a5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004a60:	ed8d 1b00 	vstr	d1, [sp]
 8004a64:	da07      	bge.n	8004a76 <__kernel_cos+0x26>
 8004a66:	ee10 0a10 	vmov	r0, s0
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	f7fc f80a 	bl	8000a84 <__aeabi_d2iz>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f000 8088 	beq.w	8004b86 <__kernel_cos+0x136>
 8004a76:	4632      	mov	r2, r6
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f7fb fd67 	bl	8000550 <__aeabi_dmul>
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <__kernel_cos+0x178>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	460d      	mov	r5, r1
 8004a8a:	f7fb fd61 	bl	8000550 <__aeabi_dmul>
 8004a8e:	a340      	add	r3, pc, #256	; (adr r3, 8004b90 <__kernel_cos+0x140>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	4682      	mov	sl, r0
 8004a96:	468b      	mov	fp, r1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fd58 	bl	8000550 <__aeabi_dmul>
 8004aa0:	a33d      	add	r3, pc, #244	; (adr r3, 8004b98 <__kernel_cos+0x148>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb9d 	bl	80001e4 <__adddf3>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f7fb fd4f 	bl	8000550 <__aeabi_dmul>
 8004ab2:	a33b      	add	r3, pc, #236	; (adr r3, 8004ba0 <__kernel_cos+0x150>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fb92 	bl	80001e0 <__aeabi_dsub>
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f7fb fd46 	bl	8000550 <__aeabi_dmul>
 8004ac4:	a338      	add	r3, pc, #224	; (adr r3, 8004ba8 <__kernel_cos+0x158>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fb8b 	bl	80001e4 <__adddf3>
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	f7fb fd3d 	bl	8000550 <__aeabi_dmul>
 8004ad6:	a336      	add	r3, pc, #216	; (adr r3, 8004bb0 <__kernel_cos+0x160>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fb80 	bl	80001e0 <__aeabi_dsub>
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f7fb fd34 	bl	8000550 <__aeabi_dmul>
 8004ae8:	a333      	add	r3, pc, #204	; (adr r3, 8004bb8 <__kernel_cos+0x168>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fb79 	bl	80001e4 <__adddf3>
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	f7fb fd2b 	bl	8000550 <__aeabi_dmul>
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f7fb fd27 	bl	8000550 <__aeabi_dmul>
 8004b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b06:	4604      	mov	r4, r0
 8004b08:	460d      	mov	r5, r1
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	f7fb fd1f 	bl	8000550 <__aeabi_dmul>
 8004b12:	460b      	mov	r3, r1
 8004b14:	4602      	mov	r2, r0
 8004b16:	4629      	mov	r1, r5
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7fb fb61 	bl	80001e0 <__aeabi_dsub>
 8004b1e:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <__kernel_cos+0x17c>)
 8004b20:	4598      	cmp	r8, r3
 8004b22:	4606      	mov	r6, r0
 8004b24:	460f      	mov	r7, r1
 8004b26:	dc10      	bgt.n	8004b4a <__kernel_cos+0xfa>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	4659      	mov	r1, fp
 8004b30:	f7fb fb56 	bl	80001e0 <__aeabi_dsub>
 8004b34:	460b      	mov	r3, r1
 8004b36:	4926      	ldr	r1, [pc, #152]	; (8004bd0 <__kernel_cos+0x180>)
 8004b38:	4602      	mov	r2, r0
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7fb fb50 	bl	80001e0 <__aeabi_dsub>
 8004b40:	ec41 0b10 	vmov	d0, r0, r1
 8004b44:	b003      	add	sp, #12
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <__kernel_cos+0x184>)
 8004b4c:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <__kernel_cos+0x180>)
 8004b4e:	4598      	cmp	r8, r3
 8004b50:	bfcc      	ite	gt
 8004b52:	4d21      	ldrgt	r5, [pc, #132]	; (8004bd8 <__kernel_cos+0x188>)
 8004b54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004b58:	2400      	movs	r4, #0
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f7fb fb3e 	bl	80001e0 <__aeabi_dsub>
 8004b64:	4622      	mov	r2, r4
 8004b66:	4680      	mov	r8, r0
 8004b68:	4689      	mov	r9, r1
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	4659      	mov	r1, fp
 8004b70:	f7fb fb36 	bl	80001e0 <__aeabi_dsub>
 8004b74:	4632      	mov	r2, r6
 8004b76:	463b      	mov	r3, r7
 8004b78:	f7fb fb32 	bl	80001e0 <__aeabi_dsub>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4640      	mov	r0, r8
 8004b82:	4649      	mov	r1, r9
 8004b84:	e7da      	b.n	8004b3c <__kernel_cos+0xec>
 8004b86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004bc0 <__kernel_cos+0x170>
 8004b8a:	e7db      	b.n	8004b44 <__kernel_cos+0xf4>
 8004b8c:	f3af 8000 	nop.w
 8004b90:	be8838d4 	.word	0xbe8838d4
 8004b94:	bda8fae9 	.word	0xbda8fae9
 8004b98:	bdb4b1c4 	.word	0xbdb4b1c4
 8004b9c:	3e21ee9e 	.word	0x3e21ee9e
 8004ba0:	809c52ad 	.word	0x809c52ad
 8004ba4:	3e927e4f 	.word	0x3e927e4f
 8004ba8:	19cb1590 	.word	0x19cb1590
 8004bac:	3efa01a0 	.word	0x3efa01a0
 8004bb0:	16c15177 	.word	0x16c15177
 8004bb4:	3f56c16c 	.word	0x3f56c16c
 8004bb8:	5555554c 	.word	0x5555554c
 8004bbc:	3fa55555 	.word	0x3fa55555
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	3ff00000 	.word	0x3ff00000
 8004bc8:	3fe00000 	.word	0x3fe00000
 8004bcc:	3fd33332 	.word	0x3fd33332
 8004bd0:	3ff00000 	.word	0x3ff00000
 8004bd4:	3fe90000 	.word	0x3fe90000
 8004bd8:	3fd20000 	.word	0x3fd20000
 8004bdc:	00000000 	.word	0x00000000

08004be0 <__kernel_rem_pio2>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	ed2d 8b02 	vpush	{d8}
 8004be8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004bec:	f112 0f14 	cmn.w	r2, #20
 8004bf0:	9308      	str	r3, [sp, #32]
 8004bf2:	9101      	str	r1, [sp, #4]
 8004bf4:	4bc6      	ldr	r3, [pc, #792]	; (8004f10 <__kernel_rem_pio2+0x330>)
 8004bf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004bf8:	9009      	str	r0, [sp, #36]	; 0x24
 8004bfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c06:	bfa8      	it	ge
 8004c08:	1ed4      	subge	r4, r2, #3
 8004c0a:	9306      	str	r3, [sp, #24]
 8004c0c:	bfb2      	itee	lt
 8004c0e:	2400      	movlt	r4, #0
 8004c10:	2318      	movge	r3, #24
 8004c12:	fb94 f4f3 	sdivge	r4, r4, r3
 8004c16:	f06f 0317 	mvn.w	r3, #23
 8004c1a:	fb04 3303 	mla	r3, r4, r3, r3
 8004c1e:	eb03 0a02 	add.w	sl, r3, r2
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	9a06      	ldr	r2, [sp, #24]
 8004c26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004f00 <__kernel_rem_pio2+0x320>
 8004c2a:	eb03 0802 	add.w	r8, r3, r2
 8004c2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004c30:	1aa7      	subs	r7, r4, r2
 8004c32:	ae20      	add	r6, sp, #128	; 0x80
 8004c34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004c38:	2500      	movs	r5, #0
 8004c3a:	4545      	cmp	r5, r8
 8004c3c:	dd18      	ble.n	8004c70 <__kernel_rem_pio2+0x90>
 8004c3e:	9b08      	ldr	r3, [sp, #32]
 8004c40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004c44:	aa20      	add	r2, sp, #128	; 0x80
 8004c46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004f00 <__kernel_rem_pio2+0x320>
 8004c4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004c4e:	f1c3 0301 	rsb	r3, r3, #1
 8004c52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	9b07      	ldr	r3, [sp, #28]
 8004c5a:	9a04      	ldr	r2, [sp, #16]
 8004c5c:	4443      	add	r3, r8
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	db2f      	blt.n	8004cc2 <__kernel_rem_pio2+0xe2>
 8004c62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004c66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004c6a:	462f      	mov	r7, r5
 8004c6c:	2600      	movs	r6, #0
 8004c6e:	e01b      	b.n	8004ca8 <__kernel_rem_pio2+0xc8>
 8004c70:	42ef      	cmn	r7, r5
 8004c72:	d407      	bmi.n	8004c84 <__kernel_rem_pio2+0xa4>
 8004c74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004c78:	f7fb fc00 	bl	800047c <__aeabi_i2d>
 8004c7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7da      	b.n	8004c3a <__kernel_rem_pio2+0x5a>
 8004c84:	ec51 0b18 	vmov	r0, r1, d8
 8004c88:	e7f8      	b.n	8004c7c <__kernel_rem_pio2+0x9c>
 8004c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004c92:	f7fb fc5d 	bl	8000550 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c9e:	f7fb faa1 	bl	80001e4 <__adddf3>
 8004ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	9b06      	ldr	r3, [sp, #24]
 8004caa:	429e      	cmp	r6, r3
 8004cac:	f1a7 0708 	sub.w	r7, r7, #8
 8004cb0:	ddeb      	ble.n	8004c8a <__kernel_rem_pio2+0xaa>
 8004cb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	ecab 7b02 	vstmia	fp!, {d7}
 8004cbc:	f108 0801 	add.w	r8, r8, #1
 8004cc0:	e7ca      	b.n	8004c58 <__kernel_rem_pio2+0x78>
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	aa0c      	add	r2, sp, #48	; 0x30
 8004cc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ccc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004cce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004cd2:	9c04      	ldr	r4, [sp, #16]
 8004cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd6:	ab98      	add	r3, sp, #608	; 0x260
 8004cd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cdc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004ce0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004ce4:	f8cd b008 	str.w	fp, [sp, #8]
 8004ce8:	4625      	mov	r5, r4
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	dc78      	bgt.n	8004de0 <__kernel_rem_pio2+0x200>
 8004cee:	ec47 6b10 	vmov	d0, r6, r7
 8004cf2:	4650      	mov	r0, sl
 8004cf4:	f000 fbfc 	bl	80054f0 <scalbn>
 8004cf8:	ec57 6b10 	vmov	r6, r7, d0
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004d02:	ee10 0a10 	vmov	r0, s0
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb fc22 	bl	8000550 <__aeabi_dmul>
 8004d0c:	ec41 0b10 	vmov	d0, r0, r1
 8004d10:	f000 fb6e 	bl	80053f0 <floor>
 8004d14:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <__kernel_rem_pio2+0x334>)
 8004d16:	ec51 0b10 	vmov	r0, r1, d0
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f7fb fc18 	bl	8000550 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4630      	mov	r0, r6
 8004d26:	4639      	mov	r1, r7
 8004d28:	f7fb fa5a 	bl	80001e0 <__aeabi_dsub>
 8004d2c:	460f      	mov	r7, r1
 8004d2e:	4606      	mov	r6, r0
 8004d30:	f7fb fea8 	bl	8000a84 <__aeabi_d2iz>
 8004d34:	9007      	str	r0, [sp, #28]
 8004d36:	f7fb fba1 	bl	800047c <__aeabi_i2d>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4630      	mov	r0, r6
 8004d40:	4639      	mov	r1, r7
 8004d42:	f7fb fa4d 	bl	80001e0 <__aeabi_dsub>
 8004d46:	f1ba 0f00 	cmp.w	sl, #0
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460f      	mov	r7, r1
 8004d4e:	dd70      	ble.n	8004e32 <__kernel_rem_pio2+0x252>
 8004d50:	1e62      	subs	r2, r4, #1
 8004d52:	ab0c      	add	r3, sp, #48	; 0x30
 8004d54:	9d07      	ldr	r5, [sp, #28]
 8004d56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d5a:	f1ca 0118 	rsb	r1, sl, #24
 8004d5e:	fa40 f301 	asr.w	r3, r0, r1
 8004d62:	441d      	add	r5, r3
 8004d64:	408b      	lsls	r3, r1
 8004d66:	1ac0      	subs	r0, r0, r3
 8004d68:	ab0c      	add	r3, sp, #48	; 0x30
 8004d6a:	9507      	str	r5, [sp, #28]
 8004d6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004d70:	f1ca 0317 	rsb	r3, sl, #23
 8004d74:	fa40 f303 	asr.w	r3, r0, r3
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	9b02      	ldr	r3, [sp, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd66      	ble.n	8004e4e <__kernel_rem_pio2+0x26e>
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	2200      	movs	r2, #0
 8004d84:	3301      	adds	r3, #1
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	4615      	mov	r5, r2
 8004d8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004d8e:	4294      	cmp	r4, r2
 8004d90:	f300 8099 	bgt.w	8004ec6 <__kernel_rem_pio2+0x2e6>
 8004d94:	f1ba 0f00 	cmp.w	sl, #0
 8004d98:	dd07      	ble.n	8004daa <__kernel_rem_pio2+0x1ca>
 8004d9a:	f1ba 0f01 	cmp.w	sl, #1
 8004d9e:	f000 80a5 	beq.w	8004eec <__kernel_rem_pio2+0x30c>
 8004da2:	f1ba 0f02 	cmp.w	sl, #2
 8004da6:	f000 80c1 	beq.w	8004f2c <__kernel_rem_pio2+0x34c>
 8004daa:	9b02      	ldr	r3, [sp, #8]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d14e      	bne.n	8004e4e <__kernel_rem_pio2+0x26e>
 8004db0:	4632      	mov	r2, r6
 8004db2:	463b      	mov	r3, r7
 8004db4:	4958      	ldr	r1, [pc, #352]	; (8004f18 <__kernel_rem_pio2+0x338>)
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7fb fa12 	bl	80001e0 <__aeabi_dsub>
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d044      	beq.n	8004e4e <__kernel_rem_pio2+0x26e>
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004f08 <__kernel_rem_pio2+0x328>
 8004dca:	f000 fb91 	bl	80054f0 <scalbn>
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	ec53 2b10 	vmov	r2, r3, d0
 8004dd6:	f7fb fa03 	bl	80001e0 <__aeabi_dsub>
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	e036      	b.n	8004e4e <__kernel_rem_pio2+0x26e>
 8004de0:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <__kernel_rem_pio2+0x33c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	4630      	mov	r0, r6
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fbb2 	bl	8000550 <__aeabi_dmul>
 8004dec:	f7fb fe4a 	bl	8000a84 <__aeabi_d2iz>
 8004df0:	f7fb fb44 	bl	800047c <__aeabi_i2d>
 8004df4:	4b4a      	ldr	r3, [pc, #296]	; (8004f20 <__kernel_rem_pio2+0x340>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	4680      	mov	r8, r0
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	f7fb fba8 	bl	8000550 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb f9ea 	bl	80001e0 <__aeabi_dsub>
 8004e0c:	f7fb fe3a 	bl	8000a84 <__aeabi_d2iz>
 8004e10:	9b02      	ldr	r3, [sp, #8]
 8004e12:	f843 0b04 	str.w	r0, [r3], #4
 8004e16:	3d01      	subs	r5, #1
 8004e18:	9302      	str	r3, [sp, #8]
 8004e1a:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb f9dc 	bl	80001e4 <__adddf3>
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	460f      	mov	r7, r1
 8004e30:	e75b      	b.n	8004cea <__kernel_rem_pio2+0x10a>
 8004e32:	d105      	bne.n	8004e40 <__kernel_rem_pio2+0x260>
 8004e34:	1e63      	subs	r3, r4, #1
 8004e36:	aa0c      	add	r2, sp, #48	; 0x30
 8004e38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e3c:	15c3      	asrs	r3, r0, #23
 8004e3e:	e79b      	b.n	8004d78 <__kernel_rem_pio2+0x198>
 8004e40:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <__kernel_rem_pio2+0x344>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	f7fb fe0a 	bl	8000a5c <__aeabi_dcmpge>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d139      	bne.n	8004ec0 <__kernel_rem_pio2+0x2e0>
 8004e4c:	9002      	str	r0, [sp, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2300      	movs	r3, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7fb fde3 	bl	8000a20 <__aeabi_dcmpeq>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f000 80b4 	beq.w	8004fc8 <__kernel_rem_pio2+0x3e8>
 8004e60:	f104 3bff 	add.w	fp, r4, #4294967295
 8004e64:	465b      	mov	r3, fp
 8004e66:	2200      	movs	r2, #0
 8004e68:	9904      	ldr	r1, [sp, #16]
 8004e6a:	428b      	cmp	r3, r1
 8004e6c:	da65      	bge.n	8004f3a <__kernel_rem_pio2+0x35a>
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	d07b      	beq.n	8004f6a <__kernel_rem_pio2+0x38a>
 8004e72:	ab0c      	add	r3, sp, #48	; 0x30
 8004e74:	f1aa 0a18 	sub.w	sl, sl, #24
 8004e78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a0 	beq.w	8004fc2 <__kernel_rem_pio2+0x3e2>
 8004e82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004f08 <__kernel_rem_pio2+0x328>
 8004e86:	4650      	mov	r0, sl
 8004e88:	f000 fb32 	bl	80054f0 <scalbn>
 8004e8c:	4f23      	ldr	r7, [pc, #140]	; (8004f1c <__kernel_rem_pio2+0x33c>)
 8004e8e:	ec55 4b10 	vmov	r4, r5, d0
 8004e92:	46d8      	mov	r8, fp
 8004e94:	2600      	movs	r6, #0
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	f280 80cf 	bge.w	800503c <__kernel_rem_pio2+0x45c>
 8004e9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004f00 <__kernel_rem_pio2+0x320>
 8004ea2:	465f      	mov	r7, fp
 8004ea4:	f04f 0800 	mov.w	r8, #0
 8004ea8:	2f00      	cmp	r7, #0
 8004eaa:	f2c0 80fd 	blt.w	80050a8 <__kernel_rem_pio2+0x4c8>
 8004eae:	ab70      	add	r3, sp, #448	; 0x1c0
 8004eb0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004f28 <__kernel_rem_pio2+0x348>
 8004eb4:	ec55 4b18 	vmov	r4, r5, d8
 8004eb8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	e0e5      	b.n	800508c <__kernel_rem_pio2+0x4ac>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	e75c      	b.n	8004d80 <__kernel_rem_pio2+0x1a0>
 8004ec6:	f8db 3000 	ldr.w	r3, [fp]
 8004eca:	b955      	cbnz	r5, 8004ee2 <__kernel_rem_pio2+0x302>
 8004ecc:	b123      	cbz	r3, 8004ed8 <__kernel_rem_pio2+0x2f8>
 8004ece:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004ed2:	f8cb 3000 	str.w	r3, [fp]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	3201      	adds	r2, #1
 8004eda:	f10b 0b04 	add.w	fp, fp, #4
 8004ede:	461d      	mov	r5, r3
 8004ee0:	e755      	b.n	8004d8e <__kernel_rem_pio2+0x1ae>
 8004ee2:	1acb      	subs	r3, r1, r3
 8004ee4:	f8cb 3000 	str.w	r3, [fp]
 8004ee8:	462b      	mov	r3, r5
 8004eea:	e7f5      	b.n	8004ed8 <__kernel_rem_pio2+0x2f8>
 8004eec:	1e62      	subs	r2, r4, #1
 8004eee:	ab0c      	add	r3, sp, #48	; 0x30
 8004ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ef8:	a90c      	add	r1, sp, #48	; 0x30
 8004efa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004efe:	e754      	b.n	8004daa <__kernel_rem_pio2+0x1ca>
	...
 8004f0c:	3ff00000 	.word	0x3ff00000
 8004f10:	080057f8 	.word	0x080057f8
 8004f14:	40200000 	.word	0x40200000
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	3e700000 	.word	0x3e700000
 8004f20:	41700000 	.word	0x41700000
 8004f24:	3fe00000 	.word	0x3fe00000
 8004f28:	080057b8 	.word	0x080057b8
 8004f2c:	1e62      	subs	r2, r4, #1
 8004f2e:	ab0c      	add	r3, sp, #48	; 0x30
 8004f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f38:	e7de      	b.n	8004ef8 <__kernel_rem_pio2+0x318>
 8004f3a:	a90c      	add	r1, sp, #48	; 0x30
 8004f3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	430a      	orrs	r2, r1
 8004f44:	e790      	b.n	8004e68 <__kernel_rem_pio2+0x288>
 8004f46:	3301      	adds	r3, #1
 8004f48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d0fa      	beq.n	8004f46 <__kernel_rem_pio2+0x366>
 8004f50:	9a08      	ldr	r2, [sp, #32]
 8004f52:	18e3      	adds	r3, r4, r3
 8004f54:	18a6      	adds	r6, r4, r2
 8004f56:	aa20      	add	r2, sp, #128	; 0x80
 8004f58:	1c65      	adds	r5, r4, #1
 8004f5a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004f5e:	9302      	str	r3, [sp, #8]
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	42ab      	cmp	r3, r5
 8004f64:	da04      	bge.n	8004f70 <__kernel_rem_pio2+0x390>
 8004f66:	461c      	mov	r4, r3
 8004f68:	e6b5      	b.n	8004cd6 <__kernel_rem_pio2+0xf6>
 8004f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e7eb      	b.n	8004f48 <__kernel_rem_pio2+0x368>
 8004f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f76:	f7fb fa81 	bl	800047c <__aeabi_i2d>
 8004f7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	46b3      	mov	fp, r6
 8004f82:	461c      	mov	r4, r3
 8004f84:	2700      	movs	r7, #0
 8004f86:	f04f 0800 	mov.w	r8, #0
 8004f8a:	f04f 0900 	mov.w	r9, #0
 8004f8e:	9b06      	ldr	r3, [sp, #24]
 8004f90:	429f      	cmp	r7, r3
 8004f92:	dd06      	ble.n	8004fa2 <__kernel_rem_pio2+0x3c2>
 8004f94:	ab70      	add	r3, sp, #448	; 0x1c0
 8004f96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004f9a:	e9c3 8900 	strd	r8, r9, [r3]
 8004f9e:	3501      	adds	r5, #1
 8004fa0:	e7de      	b.n	8004f60 <__kernel_rem_pio2+0x380>
 8004fa2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004fa6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004faa:	f7fb fad1 	bl	8000550 <__aeabi_dmul>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	f7fb f915 	bl	80001e4 <__adddf3>
 8004fba:	3701      	adds	r7, #1
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	4689      	mov	r9, r1
 8004fc0:	e7e5      	b.n	8004f8e <__kernel_rem_pio2+0x3ae>
 8004fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fc6:	e754      	b.n	8004e72 <__kernel_rem_pio2+0x292>
 8004fc8:	ec47 6b10 	vmov	d0, r6, r7
 8004fcc:	f1ca 0000 	rsb	r0, sl, #0
 8004fd0:	f000 fa8e 	bl	80054f0 <scalbn>
 8004fd4:	ec57 6b10 	vmov	r6, r7, d0
 8004fd8:	4b9f      	ldr	r3, [pc, #636]	; (8005258 <__kernel_rem_pio2+0x678>)
 8004fda:	ee10 0a10 	vmov	r0, s0
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	f7fb fd3b 	bl	8000a5c <__aeabi_dcmpge>
 8004fe6:	b300      	cbz	r0, 800502a <__kernel_rem_pio2+0x44a>
 8004fe8:	4b9c      	ldr	r3, [pc, #624]	; (800525c <__kernel_rem_pio2+0x67c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	4630      	mov	r0, r6
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb faae 	bl	8000550 <__aeabi_dmul>
 8004ff4:	f7fb fd46 	bl	8000a84 <__aeabi_d2iz>
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	f7fb fa3f 	bl	800047c <__aeabi_i2d>
 8004ffe:	4b96      	ldr	r3, [pc, #600]	; (8005258 <__kernel_rem_pio2+0x678>)
 8005000:	2200      	movs	r2, #0
 8005002:	f7fb faa5 	bl	8000550 <__aeabi_dmul>
 8005006:	460b      	mov	r3, r1
 8005008:	4602      	mov	r2, r0
 800500a:	4639      	mov	r1, r7
 800500c:	4630      	mov	r0, r6
 800500e:	f7fb f8e7 	bl	80001e0 <__aeabi_dsub>
 8005012:	f7fb fd37 	bl	8000a84 <__aeabi_d2iz>
 8005016:	f104 0b01 	add.w	fp, r4, #1
 800501a:	ab0c      	add	r3, sp, #48	; 0x30
 800501c:	f10a 0a18 	add.w	sl, sl, #24
 8005020:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005024:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005028:	e72b      	b.n	8004e82 <__kernel_rem_pio2+0x2a2>
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	f7fb fd29 	bl	8000a84 <__aeabi_d2iz>
 8005032:	ab0c      	add	r3, sp, #48	; 0x30
 8005034:	46a3      	mov	fp, r4
 8005036:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800503a:	e722      	b.n	8004e82 <__kernel_rem_pio2+0x2a2>
 800503c:	ab70      	add	r3, sp, #448	; 0x1c0
 800503e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005042:	ab0c      	add	r3, sp, #48	; 0x30
 8005044:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005048:	f7fb fa18 	bl	800047c <__aeabi_i2d>
 800504c:	4622      	mov	r2, r4
 800504e:	462b      	mov	r3, r5
 8005050:	f7fb fa7e 	bl	8000550 <__aeabi_dmul>
 8005054:	4632      	mov	r2, r6
 8005056:	e9c9 0100 	strd	r0, r1, [r9]
 800505a:	463b      	mov	r3, r7
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb fa76 	bl	8000550 <__aeabi_dmul>
 8005064:	f108 38ff 	add.w	r8, r8, #4294967295
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	e713      	b.n	8004e96 <__kernel_rem_pio2+0x2b6>
 800506e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005072:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005076:	f7fb fa6b 	bl	8000550 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb f8af 	bl	80001e4 <__adddf3>
 8005086:	3601      	adds	r6, #1
 8005088:	4604      	mov	r4, r0
 800508a:	460d      	mov	r5, r1
 800508c:	9b04      	ldr	r3, [sp, #16]
 800508e:	429e      	cmp	r6, r3
 8005090:	dc01      	bgt.n	8005096 <__kernel_rem_pio2+0x4b6>
 8005092:	45b0      	cmp	r8, r6
 8005094:	daeb      	bge.n	800506e <__kernel_rem_pio2+0x48e>
 8005096:	ab48      	add	r3, sp, #288	; 0x120
 8005098:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800509c:	e9c3 4500 	strd	r4, r5, [r3]
 80050a0:	3f01      	subs	r7, #1
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	e6ff      	b.n	8004ea8 <__kernel_rem_pio2+0x2c8>
 80050a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	dc0b      	bgt.n	80050c6 <__kernel_rem_pio2+0x4e6>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dc6e      	bgt.n	8005190 <__kernel_rem_pio2+0x5b0>
 80050b2:	d045      	beq.n	8005140 <__kernel_rem_pio2+0x560>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	f003 0007 	and.w	r0, r3, #7
 80050ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80050be:	ecbd 8b02 	vpop	{d8}
 80050c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d1f3      	bne.n	80050b4 <__kernel_rem_pio2+0x4d4>
 80050cc:	ab48      	add	r3, sp, #288	; 0x120
 80050ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80050d2:	46d0      	mov	r8, sl
 80050d4:	46d9      	mov	r9, fp
 80050d6:	f1b9 0f00 	cmp.w	r9, #0
 80050da:	f1a8 0808 	sub.w	r8, r8, #8
 80050de:	dc64      	bgt.n	80051aa <__kernel_rem_pio2+0x5ca>
 80050e0:	465c      	mov	r4, fp
 80050e2:	2c01      	cmp	r4, #1
 80050e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80050e8:	dc7e      	bgt.n	80051e8 <__kernel_rem_pio2+0x608>
 80050ea:	2000      	movs	r0, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	f1bb 0f01 	cmp.w	fp, #1
 80050f2:	f300 8097 	bgt.w	8005224 <__kernel_rem_pio2+0x644>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80050fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8099 	bne.w	8005238 <__kernel_rem_pio2+0x658>
 8005106:	9b01      	ldr	r3, [sp, #4]
 8005108:	e9c3 5600 	strd	r5, r6, [r3]
 800510c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005110:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005114:	e7ce      	b.n	80050b4 <__kernel_rem_pio2+0x4d4>
 8005116:	ab48      	add	r3, sp, #288	; 0x120
 8005118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb f860 	bl	80001e4 <__adddf3>
 8005124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005128:	f1bb 0f00 	cmp.w	fp, #0
 800512c:	daf3      	bge.n	8005116 <__kernel_rem_pio2+0x536>
 800512e:	9b02      	ldr	r3, [sp, #8]
 8005130:	b113      	cbz	r3, 8005138 <__kernel_rem_pio2+0x558>
 8005132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005136:	4619      	mov	r1, r3
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	e9c3 0100 	strd	r0, r1, [r3]
 800513e:	e7b9      	b.n	80050b4 <__kernel_rem_pio2+0x4d4>
 8005140:	2000      	movs	r0, #0
 8005142:	2100      	movs	r1, #0
 8005144:	e7f0      	b.n	8005128 <__kernel_rem_pio2+0x548>
 8005146:	ab48      	add	r3, sp, #288	; 0x120
 8005148:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb f848 	bl	80001e4 <__adddf3>
 8005154:	3c01      	subs	r4, #1
 8005156:	2c00      	cmp	r4, #0
 8005158:	daf5      	bge.n	8005146 <__kernel_rem_pio2+0x566>
 800515a:	9b02      	ldr	r3, [sp, #8]
 800515c:	b1e3      	cbz	r3, 8005198 <__kernel_rem_pio2+0x5b8>
 800515e:	4602      	mov	r2, r0
 8005160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005164:	9c01      	ldr	r4, [sp, #4]
 8005166:	e9c4 2300 	strd	r2, r3, [r4]
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005172:	f7fb f835 	bl	80001e0 <__aeabi_dsub>
 8005176:	ad4a      	add	r5, sp, #296	; 0x128
 8005178:	2401      	movs	r4, #1
 800517a:	45a3      	cmp	fp, r4
 800517c:	da0f      	bge.n	800519e <__kernel_rem_pio2+0x5be>
 800517e:	9b02      	ldr	r3, [sp, #8]
 8005180:	b113      	cbz	r3, 8005188 <__kernel_rem_pio2+0x5a8>
 8005182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005186:	4619      	mov	r1, r3
 8005188:	9b01      	ldr	r3, [sp, #4]
 800518a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800518e:	e791      	b.n	80050b4 <__kernel_rem_pio2+0x4d4>
 8005190:	465c      	mov	r4, fp
 8005192:	2000      	movs	r0, #0
 8005194:	2100      	movs	r1, #0
 8005196:	e7de      	b.n	8005156 <__kernel_rem_pio2+0x576>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e7e2      	b.n	8005164 <__kernel_rem_pio2+0x584>
 800519e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80051a2:	f7fb f81f 	bl	80001e4 <__adddf3>
 80051a6:	3401      	adds	r4, #1
 80051a8:	e7e7      	b.n	800517a <__kernel_rem_pio2+0x59a>
 80051aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80051ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80051b2:	4620      	mov	r0, r4
 80051b4:	4632      	mov	r2, r6
 80051b6:	463b      	mov	r3, r7
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7fb f813 	bl	80001e4 <__adddf3>
 80051be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f809 	bl	80001e0 <__aeabi_dsub>
 80051ce:	4632      	mov	r2, r6
 80051d0:	463b      	mov	r3, r7
 80051d2:	f7fb f807 	bl	80001e4 <__adddf3>
 80051d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80051da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80051de:	ed88 7b00 	vstr	d7, [r8]
 80051e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80051e6:	e776      	b.n	80050d6 <__kernel_rem_pio2+0x4f6>
 80051e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80051ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80051f0:	4640      	mov	r0, r8
 80051f2:	4632      	mov	r2, r6
 80051f4:	463b      	mov	r3, r7
 80051f6:	4649      	mov	r1, r9
 80051f8:	f7fa fff4 	bl	80001e4 <__adddf3>
 80051fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4640      	mov	r0, r8
 8005206:	4649      	mov	r1, r9
 8005208:	f7fa ffea 	bl	80001e0 <__aeabi_dsub>
 800520c:	4632      	mov	r2, r6
 800520e:	463b      	mov	r3, r7
 8005210:	f7fa ffe8 	bl	80001e4 <__adddf3>
 8005214:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800521c:	ed8a 7b00 	vstr	d7, [sl]
 8005220:	3c01      	subs	r4, #1
 8005222:	e75e      	b.n	80050e2 <__kernel_rem_pio2+0x502>
 8005224:	ab48      	add	r3, sp, #288	; 0x120
 8005226:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fa ffd9 	bl	80001e4 <__adddf3>
 8005232:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005236:	e75a      	b.n	80050ee <__kernel_rem_pio2+0x50e>
 8005238:	9b01      	ldr	r3, [sp, #4]
 800523a:	9a01      	ldr	r2, [sp, #4]
 800523c:	601d      	str	r5, [r3, #0]
 800523e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005242:	605c      	str	r4, [r3, #4]
 8005244:	609f      	str	r7, [r3, #8]
 8005246:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800524a:	60d3      	str	r3, [r2, #12]
 800524c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005250:	6110      	str	r0, [r2, #16]
 8005252:	6153      	str	r3, [r2, #20]
 8005254:	e72e      	b.n	80050b4 <__kernel_rem_pio2+0x4d4>
 8005256:	bf00      	nop
 8005258:	41700000 	.word	0x41700000
 800525c:	3e700000 	.word	0x3e700000

08005260 <__kernel_sin>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	ed2d 8b04 	vpush	{d8-d9}
 8005268:	eeb0 8a41 	vmov.f32	s16, s2
 800526c:	eef0 8a61 	vmov.f32	s17, s3
 8005270:	ec55 4b10 	vmov	r4, r5, d0
 8005274:	b083      	sub	sp, #12
 8005276:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800527a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800527e:	9001      	str	r0, [sp, #4]
 8005280:	da06      	bge.n	8005290 <__kernel_sin+0x30>
 8005282:	ee10 0a10 	vmov	r0, s0
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb fbfc 	bl	8000a84 <__aeabi_d2iz>
 800528c:	2800      	cmp	r0, #0
 800528e:	d051      	beq.n	8005334 <__kernel_sin+0xd4>
 8005290:	4622      	mov	r2, r4
 8005292:	462b      	mov	r3, r5
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	f7fb f95a 	bl	8000550 <__aeabi_dmul>
 800529c:	4682      	mov	sl, r0
 800529e:	468b      	mov	fp, r1
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4620      	mov	r0, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	f7fb f952 	bl	8000550 <__aeabi_dmul>
 80052ac:	a341      	add	r3, pc, #260	; (adr r3, 80053b4 <__kernel_sin+0x154>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	4680      	mov	r8, r0
 80052b4:	4689      	mov	r9, r1
 80052b6:	4650      	mov	r0, sl
 80052b8:	4659      	mov	r1, fp
 80052ba:	f7fb f949 	bl	8000550 <__aeabi_dmul>
 80052be:	a33f      	add	r3, pc, #252	; (adr r3, 80053bc <__kernel_sin+0x15c>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fa ff8c 	bl	80001e0 <__aeabi_dsub>
 80052c8:	4652      	mov	r2, sl
 80052ca:	465b      	mov	r3, fp
 80052cc:	f7fb f940 	bl	8000550 <__aeabi_dmul>
 80052d0:	a33c      	add	r3, pc, #240	; (adr r3, 80053c4 <__kernel_sin+0x164>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fa ff85 	bl	80001e4 <__adddf3>
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	f7fb f937 	bl	8000550 <__aeabi_dmul>
 80052e2:	a33a      	add	r3, pc, #232	; (adr r3, 80053cc <__kernel_sin+0x16c>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fa ff7a 	bl	80001e0 <__aeabi_dsub>
 80052ec:	4652      	mov	r2, sl
 80052ee:	465b      	mov	r3, fp
 80052f0:	f7fb f92e 	bl	8000550 <__aeabi_dmul>
 80052f4:	a337      	add	r3, pc, #220	; (adr r3, 80053d4 <__kernel_sin+0x174>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ff73 	bl	80001e4 <__adddf3>
 80052fe:	9b01      	ldr	r3, [sp, #4]
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	b9eb      	cbnz	r3, 8005342 <__kernel_sin+0xe2>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4650      	mov	r0, sl
 800530c:	4659      	mov	r1, fp
 800530e:	f7fb f91f 	bl	8000550 <__aeabi_dmul>
 8005312:	a325      	add	r3, pc, #148	; (adr r3, 80053a8 <__kernel_sin+0x148>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fa ff62 	bl	80001e0 <__aeabi_dsub>
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	f7fb f916 	bl	8000550 <__aeabi_dmul>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	f7fa ff5a 	bl	80001e4 <__adddf3>
 8005330:	4604      	mov	r4, r0
 8005332:	460d      	mov	r5, r1
 8005334:	ec45 4b10 	vmov	d0, r4, r5
 8005338:	b003      	add	sp, #12
 800533a:	ecbd 8b04 	vpop	{d8-d9}
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <__kernel_sin+0x150>)
 8005344:	ec51 0b18 	vmov	r0, r1, d8
 8005348:	2200      	movs	r2, #0
 800534a:	f7fb f901 	bl	8000550 <__aeabi_dmul>
 800534e:	4632      	mov	r2, r6
 8005350:	ec41 0b19 	vmov	d9, r0, r1
 8005354:	463b      	mov	r3, r7
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb f8f9 	bl	8000550 <__aeabi_dmul>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	ec51 0b19 	vmov	r0, r1, d9
 8005366:	f7fa ff3b 	bl	80001e0 <__aeabi_dsub>
 800536a:	4652      	mov	r2, sl
 800536c:	465b      	mov	r3, fp
 800536e:	f7fb f8ef 	bl	8000550 <__aeabi_dmul>
 8005372:	ec53 2b18 	vmov	r2, r3, d8
 8005376:	f7fa ff33 	bl	80001e0 <__aeabi_dsub>
 800537a:	a30b      	add	r3, pc, #44	; (adr r3, 80053a8 <__kernel_sin+0x148>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fb f8e2 	bl	8000550 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fa ff26 	bl	80001e4 <__adddf3>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4620      	mov	r0, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	f7fa ff1e 	bl	80001e0 <__aeabi_dsub>
 80053a4:	e7c4      	b.n	8005330 <__kernel_sin+0xd0>
 80053a6:	bf00      	nop
 80053a8:	55555549 	.word	0x55555549
 80053ac:	3fc55555 	.word	0x3fc55555
 80053b0:	3fe00000 	.word	0x3fe00000
 80053b4:	5acfd57c 	.word	0x5acfd57c
 80053b8:	3de5d93a 	.word	0x3de5d93a
 80053bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80053c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80053c4:	57b1fe7d 	.word	0x57b1fe7d
 80053c8:	3ec71de3 	.word	0x3ec71de3
 80053cc:	19c161d5 	.word	0x19c161d5
 80053d0:	3f2a01a0 	.word	0x3f2a01a0
 80053d4:	1110f8a6 	.word	0x1110f8a6
 80053d8:	3f811111 	.word	0x3f811111

080053dc <fabs>:
 80053dc:	ec51 0b10 	vmov	r0, r1, d0
 80053e0:	ee10 2a10 	vmov	r2, s0
 80053e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053e8:	ec43 2b10 	vmov	d0, r2, r3
 80053ec:	4770      	bx	lr
	...

080053f0 <floor>:
 80053f0:	ec51 0b10 	vmov	r0, r1, d0
 80053f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80053fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005400:	2e13      	cmp	r6, #19
 8005402:	ee10 5a10 	vmov	r5, s0
 8005406:	ee10 8a10 	vmov	r8, s0
 800540a:	460c      	mov	r4, r1
 800540c:	dc32      	bgt.n	8005474 <floor+0x84>
 800540e:	2e00      	cmp	r6, #0
 8005410:	da14      	bge.n	800543c <floor+0x4c>
 8005412:	a333      	add	r3, pc, #204	; (adr r3, 80054e0 <floor+0xf0>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa fee4 	bl	80001e4 <__adddf3>
 800541c:	2200      	movs	r2, #0
 800541e:	2300      	movs	r3, #0
 8005420:	f7fb fb26 	bl	8000a70 <__aeabi_dcmpgt>
 8005424:	b138      	cbz	r0, 8005436 <floor+0x46>
 8005426:	2c00      	cmp	r4, #0
 8005428:	da57      	bge.n	80054da <floor+0xea>
 800542a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800542e:	431d      	orrs	r5, r3
 8005430:	d001      	beq.n	8005436 <floor+0x46>
 8005432:	4c2d      	ldr	r4, [pc, #180]	; (80054e8 <floor+0xf8>)
 8005434:	2500      	movs	r5, #0
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	e025      	b.n	8005488 <floor+0x98>
 800543c:	4f2b      	ldr	r7, [pc, #172]	; (80054ec <floor+0xfc>)
 800543e:	4137      	asrs	r7, r6
 8005440:	ea01 0307 	and.w	r3, r1, r7
 8005444:	4303      	orrs	r3, r0
 8005446:	d01f      	beq.n	8005488 <floor+0x98>
 8005448:	a325      	add	r3, pc, #148	; (adr r3, 80054e0 <floor+0xf0>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa fec9 	bl	80001e4 <__adddf3>
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	f7fb fb0b 	bl	8000a70 <__aeabi_dcmpgt>
 800545a:	2800      	cmp	r0, #0
 800545c:	d0eb      	beq.n	8005436 <floor+0x46>
 800545e:	2c00      	cmp	r4, #0
 8005460:	bfbe      	ittt	lt
 8005462:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005466:	fa43 f606 	asrlt.w	r6, r3, r6
 800546a:	19a4      	addlt	r4, r4, r6
 800546c:	ea24 0407 	bic.w	r4, r4, r7
 8005470:	2500      	movs	r5, #0
 8005472:	e7e0      	b.n	8005436 <floor+0x46>
 8005474:	2e33      	cmp	r6, #51	; 0x33
 8005476:	dd0b      	ble.n	8005490 <floor+0xa0>
 8005478:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800547c:	d104      	bne.n	8005488 <floor+0x98>
 800547e:	ee10 2a10 	vmov	r2, s0
 8005482:	460b      	mov	r3, r1
 8005484:	f7fa feae 	bl	80001e4 <__adddf3>
 8005488:	ec41 0b10 	vmov	d0, r0, r1
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005490:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	fa23 f707 	lsr.w	r7, r3, r7
 800549c:	4207      	tst	r7, r0
 800549e:	d0f3      	beq.n	8005488 <floor+0x98>
 80054a0:	a30f      	add	r3, pc, #60	; (adr r3, 80054e0 <floor+0xf0>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fa fe9d 	bl	80001e4 <__adddf3>
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	f7fb fadf 	bl	8000a70 <__aeabi_dcmpgt>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0bf      	beq.n	8005436 <floor+0x46>
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	da02      	bge.n	80054c0 <floor+0xd0>
 80054ba:	2e14      	cmp	r6, #20
 80054bc:	d103      	bne.n	80054c6 <floor+0xd6>
 80054be:	3401      	adds	r4, #1
 80054c0:	ea25 0507 	bic.w	r5, r5, r7
 80054c4:	e7b7      	b.n	8005436 <floor+0x46>
 80054c6:	2301      	movs	r3, #1
 80054c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80054cc:	fa03 f606 	lsl.w	r6, r3, r6
 80054d0:	4435      	add	r5, r6
 80054d2:	4545      	cmp	r5, r8
 80054d4:	bf38      	it	cc
 80054d6:	18e4      	addcc	r4, r4, r3
 80054d8:	e7f2      	b.n	80054c0 <floor+0xd0>
 80054da:	2500      	movs	r5, #0
 80054dc:	462c      	mov	r4, r5
 80054de:	e7aa      	b.n	8005436 <floor+0x46>
 80054e0:	8800759c 	.word	0x8800759c
 80054e4:	7e37e43c 	.word	0x7e37e43c
 80054e8:	bff00000 	.word	0xbff00000
 80054ec:	000fffff 	.word	0x000fffff

080054f0 <scalbn>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	ec55 4b10 	vmov	r4, r5, d0
 80054f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80054fa:	4606      	mov	r6, r0
 80054fc:	462b      	mov	r3, r5
 80054fe:	b99a      	cbnz	r2, 8005528 <scalbn+0x38>
 8005500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005504:	4323      	orrs	r3, r4
 8005506:	d036      	beq.n	8005576 <scalbn+0x86>
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <scalbn+0x100>)
 800550a:	4629      	mov	r1, r5
 800550c:	ee10 0a10 	vmov	r0, s0
 8005510:	2200      	movs	r2, #0
 8005512:	f7fb f81d 	bl	8000550 <__aeabi_dmul>
 8005516:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <scalbn+0x104>)
 8005518:	429e      	cmp	r6, r3
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	da10      	bge.n	8005542 <scalbn+0x52>
 8005520:	a32b      	add	r3, pc, #172	; (adr r3, 80055d0 <scalbn+0xe0>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	e03a      	b.n	800559e <scalbn+0xae>
 8005528:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800552c:	428a      	cmp	r2, r1
 800552e:	d10c      	bne.n	800554a <scalbn+0x5a>
 8005530:	ee10 2a10 	vmov	r2, s0
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	f7fa fe54 	bl	80001e4 <__adddf3>
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	e019      	b.n	8005576 <scalbn+0x86>
 8005542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005546:	460b      	mov	r3, r1
 8005548:	3a36      	subs	r2, #54	; 0x36
 800554a:	4432      	add	r2, r6
 800554c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005550:	428a      	cmp	r2, r1
 8005552:	dd08      	ble.n	8005566 <scalbn+0x76>
 8005554:	2d00      	cmp	r5, #0
 8005556:	a120      	add	r1, pc, #128	; (adr r1, 80055d8 <scalbn+0xe8>)
 8005558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800555c:	da1c      	bge.n	8005598 <scalbn+0xa8>
 800555e:	a120      	add	r1, pc, #128	; (adr r1, 80055e0 <scalbn+0xf0>)
 8005560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005564:	e018      	b.n	8005598 <scalbn+0xa8>
 8005566:	2a00      	cmp	r2, #0
 8005568:	dd08      	ble.n	800557c <scalbn+0x8c>
 800556a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800556e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005576:	ec45 4b10 	vmov	d0, r4, r5
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005580:	da19      	bge.n	80055b6 <scalbn+0xc6>
 8005582:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005586:	429e      	cmp	r6, r3
 8005588:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800558c:	dd0a      	ble.n	80055a4 <scalbn+0xb4>
 800558e:	a112      	add	r1, pc, #72	; (adr r1, 80055d8 <scalbn+0xe8>)
 8005590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e2      	bne.n	800555e <scalbn+0x6e>
 8005598:	a30f      	add	r3, pc, #60	; (adr r3, 80055d8 <scalbn+0xe8>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa ffd7 	bl	8000550 <__aeabi_dmul>
 80055a2:	e7cb      	b.n	800553c <scalbn+0x4c>
 80055a4:	a10a      	add	r1, pc, #40	; (adr r1, 80055d0 <scalbn+0xe0>)
 80055a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0b8      	beq.n	8005520 <scalbn+0x30>
 80055ae:	a10e      	add	r1, pc, #56	; (adr r1, 80055e8 <scalbn+0xf8>)
 80055b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b4:	e7b4      	b.n	8005520 <scalbn+0x30>
 80055b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055ba:	3236      	adds	r2, #54	; 0x36
 80055bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80055c4:	4620      	mov	r0, r4
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <scalbn+0x108>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	e7e8      	b.n	800559e <scalbn+0xae>
 80055cc:	f3af 8000 	nop.w
 80055d0:	c2f8f359 	.word	0xc2f8f359
 80055d4:	01a56e1f 	.word	0x01a56e1f
 80055d8:	8800759c 	.word	0x8800759c
 80055dc:	7e37e43c 	.word	0x7e37e43c
 80055e0:	8800759c 	.word	0x8800759c
 80055e4:	fe37e43c 	.word	0xfe37e43c
 80055e8:	c2f8f359 	.word	0xc2f8f359
 80055ec:	81a56e1f 	.word	0x81a56e1f
 80055f0:	43500000 	.word	0x43500000
 80055f4:	ffff3cb0 	.word	0xffff3cb0
 80055f8:	3c900000 	.word	0x3c900000

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
